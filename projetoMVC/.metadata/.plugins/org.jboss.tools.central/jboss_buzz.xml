<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>The developer Conference Sao Paulo</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/g0v0rJ6uahI/" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="learning" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="TDC" scheme="searchisko:content:tags" /><category term="tutorial" scheme="searchisko:content:tags" /><author><name>Gustavo Lira e Silva</name></author><id>searchisko:content:id:jbossorg_blog-the_developer_conference_sao_paulo</id><updated>2020-08-28T12:39:27Z</updated><published>2020-08-28T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_what_is_the_developers_conference"&gt;&lt;a class="anchor" href="#_what_is_the_developers_conference" /&gt;What is The Developer’s Conference?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Developer’s Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it’s realized.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;TDC is a very dynamic conference aimed to present the most important topics according to local and international needs and, for this reason, there are more than ten parallel tracks a day.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This event takes place once a year in some cities in Brazil, but this year the event will be totally online due to COVID-19 impact.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat will be present on this event with 6 principal lectures and one room occurring simultaneously throughout the event. We will have an Infinispan presentation showing some important features, what’s new, demos and Quarkus integration at Red Hat sponsor room.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="_when_the_infinispan_presentation_will_happen"&gt;&lt;a class="anchor" href="#_when_the_infinispan_presentation_will_happen" /&gt;When the Infinispan presentation will happen?&lt;/h5&gt; &lt;table class="tableblock frame-all grid-all stretch table"&gt; &lt;caption class="title"&gt;Table 1. Friday, 28th August&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 50%;"&gt; &lt;col style="width: 50%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Hour&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Timezone&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;16h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BRT (GMT-3)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;17h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;EDT (UTC-4)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;20h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BST (UTC+1)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;21h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;CEST (UTC+2)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;/colgroup&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/g0v0rJ6uahI" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, What is The Developer’s Conference? The Developer’s Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it’s realized. TDC is a very dynamic conference aimed to present the most important topics according...</summary><dc:creator>Gustavo Lira e Silva</dc:creator><dc:date>2020-08-28T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/08/28/infinispan-tdc-sp/</feedburner:origLink></entry><entry><title>Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ngtm6iB5-x8/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="IntelliJ IDE" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Snyk" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="vulnerability database" scheme="searchisko:content:tags" /><author><name>Darshan Vandra</name></author><id>searchisko:content:id:jbossorg_blog-vulnerability_analysis_with_red_hat_codeready_dependency_analytics_and_snyk_intel</id><updated>2020-08-28T07:00:28Z</updated><published>2020-08-28T07:00:28Z</published><content type="html">&lt;p&gt;Red Hat CodeReady Dependency Analytics is a hosted service on OpenShift that provides vulnerability and compliance analysis for your applications, directly from your IDE. It automatically analyzes your software composition and provides recommendations to address security holes and licensing issues. The 0.1 release of CodeReady Dependency Analytics includes access to the &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/vulnerability-database/"&gt;Snyk Intel Vulnerability Database&lt;/a&gt;, which is a curated database of both unique and known open source software security advisories.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll look at how the newest release of CodeReady Dependency Analytics improves your ability to detect, identify, and fix security vulnerabilities in your code through this integration.&lt;/p&gt; &lt;h2&gt;The Snyk database&lt;/h2&gt; &lt;p&gt;Snyk Intel is a fast, current, and complete vulnerability database used to proactively find and fix vulnerabilities and license violations in open source dependencies and container images. This database is continuously curated by an experienced team of security researchers and covers a wide range of vulnerabilities. Integrating CodeReady Dependency Analytics with Snyk helps developers increase their efficiency at containing open source security issues without losing their focus on development.&lt;/p&gt; &lt;p&gt;As shown in Figure 1, Snyk supports vulnerability reporting for most major programming languages and platforms.&lt;/p&gt; &lt;div id="attachment_769917" style="width: 546px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-769917" class="wp-image-769917" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage.png" alt="Programming languages in the Snyk ecosystem include Java, Python, Rust, and .NET." width="536" height="275" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage.png 863w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage-300x154.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage-768x394.png 768w" sizes="(max-width: 536px) 100vw, 536px" /&gt;&lt;p id="caption-attachment-769917" class="wp-caption-text"&gt;Figure 1: Languages and platforms in the Snyk ecosystem.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Expanded vulnerability analysis in the IDE&lt;/h2&gt; &lt;p&gt;Just as with previous releases, opening an application manifest file in your IDE automatically triggers dependency analysis. But in this release, the summarized vulnerability information shows separate counts for commonly known software vulnerabilities, as well as security advisories that are uniquely identified by Snyk. The IDE then shows the recommended software package version to fix the vulnerability. The demo in Figure 2 shows how to access vulnerability data and recommendations from the manifest file.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/a46X6-tpv2o?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Improved stack analysis&lt;/h2&gt; &lt;p&gt;With this release, we&amp;#8217;ve also refreshed the CodeReady Dependency Analytics stack analysis report. When you launch a report, the &lt;b&gt;Security Issues&lt;/b&gt; card now shows the number of vulnerable direct dependencies and the total count of vulnerabilities across them.&lt;/p&gt; &lt;p&gt;When you expand the &lt;b&gt;Security Issues&lt;/b&gt; card, it presents separate tabs for public vulnerabilities that are commonly known and vulnerabilities that are uniquely identified by Snyk. Each tab shows a list of direct dependencies that have one or more vulnerabilities. Expanding the tab lets you see the details for each direct dependency. If a direct dependency has vulnerabilities due to its &lt;a href="https://developers.redhat.com/blog/2019/10/15/whats-new-in-red-hat-dependency-analytics/"&gt;transitive dependencies&lt;/a&gt;, then you can drill down further into those details. The demo in Figure 3 shows how to access the range of information available in the new stack analysis report.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/8hu644hcjh8?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Viewing vulnerabilities&lt;/h2&gt; &lt;p&gt;CodeReady Dependency Analytics now provides a clickable hyperlink for each commonly known vulnerability, which leads to the relevant Snyk vulnerability page. If you want to see additional details, such as known exploits for the vulnerability, you can register or sign-in to Snyk from this page. Figure 4 shows a common vulnerability page on the Snyk website.&lt;/p&gt; &lt;div id="attachment_769987" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk.png"&gt;&lt;img aria-describedby="caption-attachment-769987" class="wp-image-769987 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-1024x857.png" alt="A screenshot of the Sandbox Bypass vulnerability page on the Snyk website." width="640" height="536" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-1024x857.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-300x251.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-768x643.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk.png 1530w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769987" class="wp-caption-text"&gt;Figure 4: The Sandbox Bypass vulnerability page on the Snyk website.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Currently, you can access details about vulnerabilities unique to Snyk only from the Snyk website, which is shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_770027" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35.png"&gt;&lt;img aria-describedby="caption-attachment-770027" class="wp-image-770027 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-1024x576.png" alt="An example Snyk stack analysis report" width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-770027" class="wp-caption-text"&gt;Figure 5: The stack analysis report lists dependencies and vulnerabilities unique to your application stack.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Advanced analysis and triage&lt;/h2&gt; &lt;p&gt;Along with great vulnerability detection and fast identification, &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/open-source-security-management/"&gt;Snyk Open Source Security Management&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/container-vulnerability-management/"&gt;Snyk Container&lt;/a&gt; also provide advanced capabilities for analysis and triage as shown in Figure 6. These tools let you make data-driven decisions and quickly fix security issues and reduce security exposure. As an example, you can use Snyk&amp;#8217;s exploit maturity indicators to identify vulnerabilities that attackers could easily weaponize. This includes exploit maturity indicators to identify vulnerabilities that are easy for attackers to weaponize, and quick remediation with powerful fix advice.&lt;/p&gt; &lt;div id="attachment_770037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37.png"&gt;&lt;img aria-describedby="caption-attachment-770037" class="wp-image-770037" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-263x300.png" alt="Exploit details on the Snyk website." width="640" height="731" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-263x300.png 263w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-768x877.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37.png 792w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-770037" class="wp-caption-text"&gt;Figure 6: Snyk&amp;#8217;s analysis page shows the exploit&amp;#8217;s details.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In upcoming versions of CodeReady Dependency Analytics, developers registered with Snyk will have easier access to Snyk&amp;#8217;s advanced analysis, including exploit maturity, vulnerable functions, existing patches, and malicious information about vulnerabilities.&lt;/p&gt; &lt;h2&gt;Try CodeReady Dependency Analytics&lt;/h2&gt; &lt;p&gt;CodeReady Dependency Analytics is available as an IDE plugin for &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;Visual Studio Code&lt;/a&gt; (VS Code), &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://plugins.jetbrains.com/plugin/12541-dependency-analytics/"&gt;IntelliJ-based IDEs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Follow these links to get the CodeReady Dependency Analytics IDE extension and provide your feedback.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Get the &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;VS Code extension&lt;/a&gt; for CodeReady Dependency Analytics.&lt;/li&gt; &lt;li&gt;Get the &lt;a target="_blank" rel="nofollow" href="https://plugins.jetbrains.com/plugin/12541-dependency-analytics/"&gt;IntelliJ IDE extension&lt;/a&gt; for CodeReady Dependency Analytics.&lt;/li&gt; &lt;li&gt;Access CodeReady Dependency Analytics via the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8-analytics/fabric8-analytics-server/tree/master/api_specs/v2"&gt;fabric8-analytics-server&lt;/a&gt; API.&lt;/li&gt; &lt;li&gt;Provide your feedback on the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8-analytics/fabric8-analytics-vscode-extension/issues"&gt;Git issues repository&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We look forward to your feedback about this release of CodeReady Dependency Analytics. Stay tuned for further updates.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The fabric8 Maven Plugin is now &lt;a href="https://developers.redhat.com/blog/2020/08/26/cloud-native-java-applications-made-easy-eclipse-jkube-1-0-0-now-available"&gt;Eclipse JKube&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About Snyk&lt;/h2&gt; &lt;p&gt;Snyk is a developer-first security company that helps software-driven businesses develop fast and stay secure. Snyk&amp;#8217;s solution is built on Snyk Intel, a comprehensive, proprietary vulnerability database, maintained by an expert security research team. With tight integration into existing developer workflows, source control, and CI/CD pipelines, Snyk enables efficient security workflows and reduces mean-time-to-fix. For more information or to get started with Snyk for free today, visit &lt;a target="_blank" rel="nofollow" href="https://snyk.io"&gt;https://snyk.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#038;title=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" data-a2a-url="https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/" data-a2a-title="Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/"&gt;Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ngtm6iB5-x8" height="1" width="1" alt=""/&gt;</content><summary>Red Hat CodeReady Dependency Analytics is a hosted service on OpenShift that provides vulnerability and compliance analysis for your applications, directly from your IDE. It automatically analyzes your software composition and provides recommendations to address security holes and licensing issues. The 0.1 release of CodeReady Dependency Analytics includes access to the Snyk Intel Vulnerability Da...</summary><dc:creator>Darshan Vandra</dc:creator><dc:date>2020-08-28T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/</feedburner:origLink></entry><entry><title>Enable container-native virtualization on Red Hat OpenShift and AWS</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ypw-0PXcAuc/" /><category term="container-native" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes Operator" scheme="searchisko:content:tags" /><category term="KubeVirt" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="virtual machine" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Bryant Son</name></author><id>searchisko:content:id:jbossorg_blog-enable_container_native_virtualization_on_red_hat_openshift_and_aws</id><updated>2020-08-28T07:00:23Z</updated><published>2020-08-28T07:00:23Z</published><content type="html">&lt;p&gt;Imagine an information technology (IT) world where everything is ideal: Every company has switched over to cloud-native applications, every application is containerized, everything is automated, and the IT people see that the world is good. Things are not so ideal in the real world, though, as we know. Applications remain tightly coupled with traditional virtual machine (VM) resources such as software libraries and hardware resources. The effort to migrate them from VMs to &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt; seems insurmountable, requiring years of dedicated spending and hours from developers and software architects.&lt;/p&gt; &lt;p&gt;The dilemma is that companies want all of their applications to eventually run on containers, but they also need to support applications running on VMs until that glorious shift happens. Given that application migration from VMs to containers will happen over the long haul, some companies are exploring a &lt;a href="https://developers.redhat.com/blog/2018/10/18/modernize-your-application-deployment-with-lift-and-shift/"&gt;lift-and-shift approach&lt;/a&gt;. In theory, lift-and-shift would let us migrate tightly-coupled legacy applications to a container platform like &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt;. Rather than rewriting application code, developers would simply write interfaces (essentially, code with patterns) that are compatible with the existing structure.&lt;/p&gt; &lt;p&gt;Unfortunately, this scenario is unrealistic for legacy projects involving hundreds of application modules and packages. Therefore, it is logical to ask: What if there was a way to support existing applications running on virtual machines &lt;i&gt;and&lt;/i&gt; new applications running on containers in one unified container-based platform?&lt;/p&gt; &lt;p&gt;Luckily, there is a way: Use a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-based platform like OpenShift.&lt;/p&gt; &lt;p&gt;In this article, I introduce &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/containers/what-is-container-native-virtualization"&gt;container-native virtualization&lt;/a&gt; (CNV) in the form of &lt;a href="https://docs.openshift.com/container-platform/4.5/virt/virt-2-4-release-notes.html"&gt;OpenShift Virtualization&lt;/a&gt;, an add-on feature for OpenShift and &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (OCP). CNV allows you to run and manage virtual-machine workloads alongside container workloads.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;span style="color: #000000;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: As of version 2.4 when CNV went GA, Container-Native Virtualization was renamed OpenShift Virtualization.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;span id="more-742287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of container-native virtualization&lt;/h2&gt; &lt;p&gt;Based on the open source project &lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/"&gt;KubeVirt&lt;/a&gt;, CNV&amp;#8217;s goal is to help enterprises &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/developer-guide-lift-and-shift-cloud-migration"&gt;move from a VM-based infrastructure to a Kubernetes and container-based stack&lt;/a&gt;, one application at a time. This means that we must be able to treat applications based on traditional VM-based workflows just like we do native Kubernetes applications, including for management and routing. At the same time, many of these applications require a significant amount of VM-native configuration to function.&lt;/p&gt; &lt;p&gt;Container-native virtualization lets you deploy, run, and manage both virtual machines and containers on OpenShift, which is Red Hat&amp;#8217;s Kubernetes-based platform for the enterprise. CNV is currently in &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/learn/topics/virtualization/"&gt;tech preview&lt;/a&gt;, but you can still install and try it out on OpenShift.&lt;/p&gt; &lt;div id="attachment_769697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001.jpeg"&gt;&lt;img aria-describedby="caption-attachment-769697" class="wp-image-769697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-1024x576.jpeg" alt="A Venn diagram with the container and virtual machine overlapping in Kubernetes." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769697" class="wp-caption-text"&gt;Figure 1: Container-native virtualization makes it possible to run a VM inside OpenShift.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next sections, I will show you how to enable container-native virtualization on OpenShift. As a bonus, I will also show you how to install &lt;code&gt;virtctl&lt;/code&gt;, which is the command-line interface (CLI) for managing container-native virtualization resources.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;I used the following technologies for this demo:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat OpenShift 4.4.3 on &lt;a target="_blank" rel="nofollow" href="https://aws.amazon.com/ec2/"&gt;Amazon Web Services Elastic Compute Cloud&lt;/a&gt; (AWS EC2)&lt;/li&gt; &lt;li&gt;Red Hat container-native virtualization (CNV) 2.3.0 Tech Preview&lt;/li&gt; &lt;li&gt;MacOS for the &lt;code&gt;virtctl&lt;/code&gt; installation&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Warning&lt;/b&gt;: Please note that CNV looks for hardware virtualization by default. Thus, it requires a bare-metal server instance by default. If you use a non-bare-metal platform (like the default AWS EC2 instance), then you have to switch CNV from hardware virtualization to software emulation. Fortunately, that&amp;#8217;s not hard to do. See my follow-up to this article, &lt;a target="_blank" rel="nofollow" href="CNV-2 URL"&gt;How to enable software emulation in Red Hat OpenShift&amp;#8217;s container-native virtualization&lt;/a&gt; for a guide to switching OpenShift&amp;#8217;s container-native virtualization feature to software emulation.&lt;/p&gt; &lt;h2&gt;Container-native virtualization on OpenShift&lt;/h2&gt; &lt;p&gt;For this installation, I am using Red Hat OpenShift 4.4.3 on Amazon Web Services (AWS). I am also using the OpenShift OperatorHub to install the &lt;b&gt;Container Native Virtualization Operator&lt;/b&gt;. While you can enable CNV on Red Hat OpenShift 3.11 and above, the process is different if you don&amp;#8217;t use the OpenShift OperatorHub. In addition, CNV 2.3.0. from Red Hat OpenShift 4.4.x introduces numerous updates, including the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An enhanced web console provides a graphical portal to manage virtualized resources alongside the OCP cluster containers and infrastructure.&lt;/li&gt; &lt;li&gt;The ability to use container-native virtualization with either the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/networking/ovn_kubernetes_network_provider/about-ovn-kubernetes.html"&gt;OVN-Kubernetes&lt;/a&gt; or the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/welcome/index.html"&gt;OpenShiftSDN&lt;/a&gt; network provider.&lt;/li&gt; &lt;li&gt;The ability to import, upload, and clone virtual machine disks into namespaces that are subject to CPU and memory resource restrictions.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;virtctl&lt;/code&gt; tool, which asynchronously monitors server-side upload post-processing. It also more accurately reports the status of &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/cnv/cnv_virtual_machines/cnv_virtual_disks/cnv-uploading-local-disk-images-virtctl.html#cnv-uploading-local-disk-images-virtctl"&gt;virtual machine disk uploads&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the &lt;a href="https://docs.openshift.com/container-platform/4.4/cnv/cnv_release_notes/cnv-2-3-release-notes.html"&gt;CNV 2.3.0 documentation&lt;/a&gt; to learn more about these and other updates.&lt;/p&gt; &lt;p&gt;With these caveats in mind, let&amp;#8217;s enable CNV on Red Hat OpenShift 4.4.&lt;/p&gt; &lt;h2&gt;Step 1: Install the CNV Operator and CRD&lt;/h2&gt; &lt;p&gt;First, we need to locate &lt;b&gt;Container-native virtualization&lt;/b&gt; in the OpenShift OperatorHub. Enter the keyword &lt;code&gt;cnv&lt;/code&gt; for this search, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_742427" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742427" class="wp-image-742427 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-1024x562.png" alt="A screenshot of search results for CNV in the OpenShift Operator Hub." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-768x422.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742427" class="wp-caption-text"&gt;Figure 2: Search for CNV in the OpenShift Operator Hub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click the tile for &lt;b&gt;Container-native virtualization&lt;/b&gt;. This pops up the window shown in Figure 3 with a short introduction to CNV, including its description, the current version, the repository, and so on. Click &lt;b&gt;Install&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742317" class="wp-image-742317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-1024x556.png" alt="The pop-up window for the Container-native virtualization Operator in the OperatorHub." width="640" height="348" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-1024x556.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742317" class="wp-caption-text"&gt;Figure 3: Install CNV from the OperatorHub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 4, the next screen asks whether you want to subscribe to CNV. Note that on this screen, you can change the version of CNV and the &lt;b&gt;namespace/project&lt;/b&gt; where you want to install your CNV instance. If you have not created a namespace previously, a new namespace called &lt;b&gt;openshift-cnv&lt;/b&gt; will be created, and it will be the default namespace for your CNV deployment. (I did not create a new namespace, so I will leave everything as it is.) Click &lt;b&gt;Subscribe&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742327" class="wp-image-742327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-1024x560.png" alt="The window to configure Container-native virtualization Operator Installation." width="640" height="350" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-1024x560.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-768x420.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742327" class="wp-caption-text"&gt;Figure 4: Configure the CNV installation.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Operator-based installation&lt;/h3&gt; &lt;p&gt;Red Hat OpenShift 4 uses Operator-based installation, so the CNV Operator gathers all of the resources and requirements to prepare for the CNV setup. After waiting for the magic moment, you will see the installation status for your CNV Operator change to &lt;b&gt;Succeeded&lt;/b&gt;, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_742437" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1.png"&gt;&lt;img aria-describedby="caption-attachment-742437" class="wp-image-742437 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-1024x539.png" alt="The Installed Operators page, showing that the Containter-native virtualization Operator installation was successful." width="640" height="337" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-1024x539.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-768x404.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742437" class="wp-caption-text"&gt;Figure 5: The CNV Operator installation was successful.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Some Kubernetes and OpenShift Operators, like &lt;a href="https://developers.redhat.com/blog/2020/06/12/how-to-install-codeready-workspaces-in-a-restricted-openshift-4-environment/"&gt;Red Hat CodeReady Workspaces&lt;/a&gt;, do not immediately initiate deployment. The CNV Operator begins deploying pods immediately after you complete the Operator subscription. Checking for &lt;b&gt;Workloads&lt;/b&gt; &amp;#8211;&amp;#62; &lt;b&gt;Pods&lt;/b&gt; is a good way to confirm the successful subscription before moving on, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_742447" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1.png"&gt;&lt;img aria-describedby="caption-attachment-742447" class="wp-image-742447 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-1024x554.png" alt="A screenshot of the running pods for the CNV installation." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-1024x554.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742447" class="wp-caption-text"&gt;Figure 6: Pods should begin deploying immediately.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 2: Create a hyperconverged cluster&lt;/h2&gt; &lt;p&gt;In this step, we will install a hyperconverged cluster. Paraphrasing &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Hyper-converged_infrastructure"&gt;from Wikipedia&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Hyperconverged clusters include a hypervisor for virtualized computing, software-defined storage, and virtualized networking, and they typically run on standard, off-the-shelf servers. &lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Now, let&amp;#8217;s go back to our installed CNV in &lt;b&gt;Installed Operators&lt;/b&gt; and click on it. You will once again see the overview of CNV&amp;#8217;s Operator, including its provider APIs, the documentation link, and actions that you can perform. We are interested in the &lt;b&gt;CNV Operator Deployment&lt;/b&gt; action, so let&amp;#8217;s click that tab, which is shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_742477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1.png"&gt;&lt;img aria-describedby="caption-attachment-742477" class="wp-image-742477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-1024x541.png" alt="A screenshot of the Container-native virtualization Operator overview page." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-1024x541.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-768x406.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742477" class="wp-caption-text"&gt;Figure 7: Inside the container-native virtualization overview page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As displayed in Figure 8, there is only one option on this screen, so go ahead and click the &lt;b&gt;Create HyperConverged Cluster&lt;/b&gt; button.&lt;/p&gt; &lt;div id="attachment_742487" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1.png"&gt;&lt;img aria-describedby="caption-attachment-742487" class="wp-image-742487 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-1024x541.png" alt="The Container-native virtualization Operator deployment page with the option to select the click the 'Create HyperConverged Cluster' option." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-1024x541.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-300x159.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-768x406.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742487" class="wp-caption-text"&gt;Figure 8: The CNV Operator deployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, you will see the &lt;a target="_blank" rel="nofollow" href="https://coreos.com/blog/custom-resource-kubernetes-v17"&gt;custom resource definition&lt;/a&gt; (CRD) file for a HyperConverged cluster. The CRD extends the API with the custom resource concept. It is a stable object that developers can use to create custom controllers and Operators. For a project like container-native virtualization, which is based on KubeVirt, a CRD is an interface for instructing VMs to run on the Kubernetes platform.&lt;/p&gt; &lt;p&gt;As shown in Figure 9, ensure that the file name is &lt;b&gt;kubevirt-hyperconverged&lt;/b&gt;, then click &lt;b&gt;Create&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1.png"&gt;&lt;img aria-describedby="caption-attachment-742497" class="wp-image-742497 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-1024x555.png" alt="A screenshot of the YAML file for the HyperConverged cluster." width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742497" class="wp-caption-text"&gt;Figure 9: The YAML file for creating a HyperConverged infrastructure.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Creating the CRD essentially installs the HyperConverged cluster. That&amp;#8217;s not so bad, is it? We can now check our pods again to make sure that everything is deployed correctly, with no hiccups.&lt;/p&gt; &lt;div id="attachment_742507" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2.png"&gt;&lt;img aria-describedby="caption-attachment-742507" class="wp-image-742507 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-1024x545.png" alt="The Container-native virtualization Operator's HyperConverged cluster installation page." width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-1024x545.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-768x408.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742507" class="wp-caption-text"&gt;Figure 10: Confirm the HyperConverged cluster installation is complete.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Troubleshooting pods&lt;/h3&gt; &lt;p&gt;When you check your pods, be sure to monitor any issues that might have come up after the HyperConverged cluster installation. If you see any issues—such as pods stuck in the pending state, showing an &lt;b&gt;Err Image Pull&lt;/b&gt; status, and so on—you can go inside the troubled pod and look at its events and logs to discover the possible cause of the problem. If there is no problem, your CNV installation is done.&lt;/p&gt; &lt;div id="attachment_742517" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1.png"&gt;&lt;img aria-describedby="caption-attachment-742517" class="wp-image-742517 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-1024x536.png" alt="A screenshot of the running pods listing for CNV." width="640" height="335" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-1024x536.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742517" class="wp-caption-text"&gt;Figure 11: Check the pods troubleshoot deployment issues.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 3: Take CNV for a test drive&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s take our installed CNV Operator for a short drive. I will not dive into what you can do with CNV in this article, but we can at least start up a virtual machine&lt;/p&gt; &lt;p&gt;Under &lt;b&gt;Workloads&lt;/b&gt;, click &lt;b&gt;virtual machines&lt;/b&gt;. This brings up a screen where you only see one option right now, which is the &lt;b&gt;Create Virtual Machine&lt;/b&gt; button. Clicking that button leads to a drop-down list where you are given three options: &lt;b&gt;New with Wizard&lt;/b&gt;, &lt;b&gt;Import with Wizard&lt;/b&gt;, and &lt;b&gt;New from YAML&lt;/b&gt;. Select the &lt;b&gt;New with Wizard&lt;/b&gt; option, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_742307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM.png"&gt;&lt;img aria-describedby="caption-attachment-742307" class="wp-image-742307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-1024x555.png" alt="A screenshot of the options to create a new virtual machine." width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742307" class="wp-caption-text"&gt;Figure 12: Go to Workloads, then Virtual Machines to create your first VM through CNV.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Hooray! You see a nice wizard interface where you can create your VM within OpenShift, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_742527" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13.png"&gt;&lt;img aria-describedby="caption-attachment-742527" class="wp-image-742527 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-1024x552.png" alt="A screenshot of the window to configure the virtual machine." width="640" height="345" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-1024x552.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-768x414.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742527" class="wp-caption-text"&gt;Figure 13: The interface to create a virtual machine using CNV.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I&amp;#8217;ll introduce what you can do with container-native virtualization in another article soon.&lt;/p&gt; &lt;h2&gt;Installing the virtctl CLI&lt;/h2&gt; &lt;p&gt;Before I wrap up this article, I want to introduce &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;virtctl&lt;/a&gt;, which is CNV&amp;#8217;s command-line utility for managing container-native virtualization resources. While you can use the OpenShift CLI to manage these OpenShift resources, &lt;code&gt;virtctl&lt;/code&gt; lets you interact with the VMs provisioned in an OpenShift or Kubernetes cluster.&lt;/p&gt; &lt;p&gt;In a &lt;a target="_blank" rel="nofollow" href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;&amp;#8211; or &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt;-based environment, you can easily use the subscription manager to install &lt;code&gt;virtctl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;subscription-manager repos --enable {repository} &lt;/pre&gt; &lt;p&gt;Use one of these options for the repository:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Enterprise Linux 8: &lt;code&gt;cnv-2.1-for-rhel-8-x86_64-rpms&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Red Hat Enterprise Linux 7: &lt;code&gt;rhel-7-server-cnv-2.1-rpms&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Installing virtctl on other platforms&lt;/h3&gt; &lt;p&gt;What if you are using an operating system other than RHEL, like macOS, Windows, or another Linux platform? In that case, you can download &lt;code&gt;virtctl&lt;/code&gt; and run it as an executable.&lt;/p&gt; &lt;p&gt;To start, locate the version of &lt;code&gt;virtctl&lt;/code&gt; that you need from the &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;GitHub release repository&lt;/a&gt;, which is shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_742537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742537" class="wp-image-742537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-1024x504.png" alt="A screenshot of the GitHub repository for virtctl." width="640" height="315" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-1024x504.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-768x378.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742537" class="wp-caption-text"&gt;Figure 14: Download virtctl from its GitHub repository.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you have a tool like &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt;, use the following commands to make the downloaded package executable:&lt;/p&gt; &lt;pre&gt;$ wget -O virtctl https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/virtctl-${KUBEVIRT_VERSION}-linux-amd64 $ chmod +x virtctl &lt;/pre&gt; &lt;h3&gt;A macOS installation&lt;/h3&gt; &lt;p&gt;I am using a MacBook Pro, so I decided to download &lt;code&gt;virtctl&lt;/code&gt; manually. Once I downloaded it, I renamed the file to &lt;b&gt;virtctl&lt;/b&gt; and placed it under a designated directory, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_742557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742557" class="wp-image-742557 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-1024x275.png" alt="A screenshot of the command line interface." width="640" height="172" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-1024x275.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-768x206.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM.png 1296w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742557" class="wp-caption-text"&gt;Figure 15: Put virctl in a place where you won&amp;#8217;t forget it.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can make the downloaded file executable by entering the command: &lt;code&gt;chmod +x ./virtctl&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After that, grab the path and export it in &lt;code&gt;~/.bashrc&lt;/code&gt;, as shown in Figure 16. Once you&amp;#8217;ve done that, &lt;code&gt;virtctl&lt;/code&gt; will be available everywhere by just typing &lt;code&gt;virtctl&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_742567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742567" class="wp-image-742567 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-1024x97.png" alt="A screenshot of the CLI with instructions to export the path to ~/.bashrc." width="640" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-1024x97.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-768x72.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742567" class="wp-caption-text"&gt;Figure 16: Add the virtctl path to ~/.bashrc.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 17 shows what happens when I enter the &lt;code&gt;~/.bashrc&lt;/code&gt; command followed by &lt;code&gt;virtctl&lt;/code&gt;:&lt;/p&gt; &lt;div id="attachment_742577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742577" class="wp-image-742577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-1024x342.png" alt="A screenshot of the CLI executing virtctl." width="640" height="214" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-1024x342.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-300x100.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-768x257.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742577" class="wp-caption-text"&gt;Figure 17: Type &lt;code&gt;virtctl&lt;/code&gt; to execute the utility.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope this article helped you understand what container-native virtualization is and how you can enable it for Red Hat OpenShift. Look for my next article, where we&amp;#8217;ll dive into what you can do with CNV.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#038;title=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" data-a2a-url="https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/" data-a2a-title="Enable container-native virtualization on Red Hat OpenShift and AWS"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/"&gt;Enable container-native virtualization on Red Hat OpenShift and AWS&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ypw-0PXcAuc" height="1" width="1" alt=""/&gt;</content><summary>Imagine an information technology (IT) world where everything is ideal: Every company has switched over to cloud-native applications, every application is containerized, everything is automated, and the IT people see that the world is good. Things are not so ideal in the real world, though, as we know. Applications remain tightly coupled with traditional virtual machine (VM) resources such as soft...</summary><dc:creator>Bryant Son</dc:creator><dc:date>2020-08-28T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/</feedburner:origLink></entry><entry><title>Developing micro-microservices in C on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fPAbaHp29kk/" /><category term="Alpine Linux" scheme="searchisko:content:tags" /><category term="busybox" scheme="searchisko:content:tags" /><category term="C" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="libmicrohttpd" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="musl libc" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="REST web service" scheme="searchisko:content:tags" /><author><name>kboone</name></author><id>searchisko:content:id:jbossorg_blog-developing_micro_microservices_in_c_on_red_hat_openshift</id><updated>2020-08-27T07:00:16Z</updated><published>2020-08-27T07:00:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; holds its dominating position in enterprise middleware for good reasons; however, describing anything in Java as &amp;#8220;micro&amp;#8221; requires a generous interpretation. It isn&amp;#8217;t unusual to find Java-based &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; that need half a gigabyte of RAM to provide modest functionality at a modest load. The trend toward &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless architectures&lt;/a&gt;, where services are started and stopped according to demand, does little to improve the situation.&lt;/p&gt; &lt;p&gt;It has recently become possible to compile Java to a native executable using tools like &lt;a href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;GraalVM&lt;/a&gt;. This technique, coupled with an optimized Java runtime like &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, tames Java&amp;#8217;s resource consumption to some extent.&lt;/p&gt; &lt;p&gt;Nevertheless, we should not lose sight of programming languages that were designed from the start to compile to native code, with little to no runtime overhead. Languages like &lt;a href="https://developers.redhat.com/blog/category/rust/"&gt;Rust&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go&lt;/a&gt; have become popular, and justifiably so. For optimal runtime resource usage and millisecond startup times, though, it remains hard to beat &lt;a href="https://developers.redhat.com/topics/c/"&gt;C&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-740807"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Comparatively few people in the IT industry have experience implementing middleware components in C. This fact is ironic because C is an ideal vehicle for implementing truly micro microservices. Using &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; removes one of the main disincentives to using C—lack of cross-platform compatibility at the binary level. Similar to the JVM for Java programs, the container is the runtime environment for native code.&lt;/p&gt; &lt;p&gt;This article discusses some of the implications of implementing a REST-based web service in C. My example is a component called &lt;code&gt;solunar_ws&lt;/code&gt; that calculates sun- and moonrise and sets times at any location on any day. I have deliberately chosen an example that is self-contained, but which does real computational work. With 8,000-or-so lines of C code, this example is a good deal more complex than a &amp;#8220;Hello, World.&amp;#8221; Still, the complete executable, including all of its dependencies, is less than 1MB in size. Even under load, its memory usage is measured in kilobytes. The total container image size is about 10MB, and that includes 3MB of necessary data.&lt;/p&gt; &lt;p&gt;See my &lt;a target="_blank" rel="nofollow" href="https://github.com/kevinboone/solunar_ws"&gt;GitHub repository&lt;/a&gt; for the complete source code. That is also where you&amp;#8217;ll find instructions for building and deploying the example on &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About the web service&lt;/h2&gt; &lt;p&gt;This article isn&amp;#8217;t about astronomical computation, so I won&amp;#8217;t describe the program&amp;#8217;s internal operations.&lt;/p&gt; &lt;p&gt;As I mentioned earlier, the &lt;code&gt;solunar_ws&lt;/code&gt; component is a REST-based web service that provides sun- and moonrise and set information in a specific city on a specified day. It is invoked using a URL of this form:&lt;/p&gt; &lt;pre&gt;http://host:8080/day/[city]/[date]&lt;/pre&gt; &lt;p&gt;This URL produces results in JSON format, where &lt;code&gt;city&lt;/code&gt; is a name like &lt;code&gt;london&lt;/code&gt;, &lt;code&gt;minsk&lt;/code&gt;, or &lt;code&gt;detroit&lt;/code&gt;, and the &lt;code&gt;date&lt;/code&gt; is in the form &lt;code&gt;aug 20 2020&lt;/code&gt; (and escaped according to the usual HTTP rules).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;solunar_ws&lt;/code&gt; component uses &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/libmicrohttpd/"&gt;GNU libmicrohttpd&lt;/a&gt; as its HTTP engine. This is a well-established, lightweight HTTP library that hands incoming requests to a programmer-defined handler function (a bit like the &lt;code&gt;Servlet&lt;/code&gt; interface in Java).&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve chosen the libmicrohttpd library because of its small size and low resource usage. An alternative approach would be to implement the web service as a plugin for &lt;a target="_blank" rel="nofollow" href="https://httpd.apache.org/"&gt;Apache HTTPD&lt;/a&gt;. Apache HTTPD is more battle-hardened and might be a better choice in hostile environments. In any case, the computation code would be unchanged.&lt;/p&gt; &lt;h2&gt;About the container&lt;/h2&gt; &lt;p&gt;The web service resides in a Linux container (examples include docker, &lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools"&gt;Podman&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/courses/red-hat-enterprise-linux/containers-buildah"&gt;Buildah&lt;/a&gt;) that can be deployed on OpenShift. Although I do most of my development on &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt;, even the lightest mainstream Fedora image provides considerably more functionality than this microservice requires. Consequently, the container&amp;#8217;s base layer is Alpine Linux.&lt;/p&gt; &lt;p&gt;Alpine&amp;#8217;s base layer is only about 6MB in size. This is because it uses BusyBox to provide a shell and utilities, and these are built against the &lt;a target="_blank" rel="nofollow" href="https://musl.libc.org/"&gt;MUSL C library&lt;/a&gt;, not &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt;. MUSL is a minimal, POSIX-compliant C standard library. In principle, there&amp;#8217;s nothing preventing us from linking the web service application against glibc and including the glibc binaries in the image. However, the whole purpose of this exercise is to create the smallest possible image; including an additional three megabytes in a second standard C library won&amp;#8217;t help us achieve that goal.&lt;/p&gt; &lt;h2&gt;Challenges&lt;/h2&gt; &lt;p&gt;Building a microservice in C for Alpine presents some challenges, which I&amp;#8217;ll discuss next. However, since the challenges involved in writing good-quality, serviceable C code are already well-known, they are outside the scope of this article.&lt;/p&gt; &lt;h3&gt;BusyBox&lt;/h3&gt; &lt;p&gt;That the Alpine image uses BusyBox rather than the GNU core utilities (coreutils) has potential implications for how we build containers. It&amp;#8217;s common to build a container image using a Dockerfile full of chained shell commands. Using a lightweight base layer doesn&amp;#8217;t change this practice in principle, but the commands might be different or have different options. Practically speaking, I haven&amp;#8217;t found any significant problems in this area—it&amp;#8217;s one of the less problematic aspects of container development. Commands like &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;wget&lt;/code&gt; work as expected. BusyBox has its own ways of doing system setup tasks like adding users and groups, but they aren&amp;#8217;t conceptually different from what we&amp;#8217;re used to.&lt;/p&gt; &lt;h3&gt;Alpine dependencies&lt;/h3&gt; &lt;p&gt;Building the container almost always involves importing certain dependencies into the image. Alpine has its own repository, and its own installation command (&lt;code&gt;apk add&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A problem, however, is that some of the libraries in the Alpine repository are built against glibc, so a naive use of &lt;code&gt;apk add&lt;/code&gt; imports a sprawl of additional binaries. It&amp;#8217;s possible to fix this, but I&amp;#8217;ve found it easier to build most dependencies from source, rather than import them from repositories. I&amp;#8217;ll return to this point later.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;solunar_ws&lt;/code&gt; component only has two significant dependencies: &lt;code&gt;libmicrohttpd&lt;/code&gt;, which we will build from source, and &lt;code&gt;tzdata&lt;/code&gt;—the &lt;a href="https://developers.redhat.com/blog/2020/04/03/whats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux/"&gt;global timezone database&lt;/a&gt;. This latter is not an executable and has no sub-dependencies, so we can safely install it from the Alpine repository.&lt;/p&gt; &lt;p&gt;In general, however, when aiming for a truly small container, it pays to be very careful about using repositories to build images.&lt;/p&gt; &lt;h3&gt;MUSL&lt;/h3&gt; &lt;p&gt;Alpine&amp;#8217;s core utilities are all linked against MUSL rather than glibc, and Alpine includes no other C library by default. Using MUSL is a little problematic for those of us who have grown accustomed to glibc extensions when developing for Linux. Let&amp;#8217;s take just a couple of examples. First, MUSL has no equivalent of the glibc &lt;code&gt;qsort_r()&lt;/code&gt; function, which is used for sorting arbitrary data structures. To be honest, I did not even realize that this was an extension until I started working with Alpine. Second, MUSL has some unaccountable gaps in how it implements certain functions. For example, the &lt;code&gt;strftime()&lt;/code&gt; function for formatting time data lacks specifiers that the glibc implementation has.&lt;/p&gt; &lt;p&gt;We can work around these quirks as long as we know about them. There&amp;#8217;s no substitute here for regular testing on the target platform, either in a container or in a virtual machine.&lt;/p&gt; &lt;h3&gt;TLS issues&lt;/h3&gt; &lt;p&gt;If you need to encrypt HTTP traffic to the microservice, then you&amp;#8217;ll need to decide whether it needs to be encrypted within the OpenShift cluster or just &lt;em&gt;to&lt;/em&gt; the OpenShift cluster. Encrypting traffic to the cluster is simple because we can configure an OpenShift route to do edge termination. In this configuration, internal traffic between the OpenShift router and the microservice will be plain text.&lt;/p&gt; &lt;p&gt;On the other hand, if you want traffic encrypted even within the OpenShift cluster, you&amp;#8217;ll need to provide the microservice with its own Transport Layer Security (TLS) support. The libmicrohttpd library supports TLS, but to enable that support, we need to build it with development versions of a number of GNU TLS libraries. Of course, these libraries must be available to the container at runtime, as well.&lt;/p&gt; &lt;p&gt;In addition, you&amp;#8217;ll need to provide a server certificate, and a way for clients&amp;#8217; administrators to obtain that certificate. You could provide the certificates in an OpenShift secret or ConfigMap, and mount it as a file in the pod&amp;#8217;s filesystem. This technique is relatively common, and using it with C isn&amp;#8217;t any different in principle from using it with Java or any other language.&lt;/p&gt; &lt;p&gt;What &lt;em&gt;is&lt;/em&gt; different is that a Java Virtual Machine (JVM) provides TLS support implicitly, but the C developer has to install and configure the necessary dependencies at both build and runtime. For the sake of simplicity, I&amp;#8217;ve assumed that &lt;code&gt;solunar_ws&lt;/code&gt; uses edge termination, so it doesn&amp;#8217;t include or require its own TLS support.&lt;/p&gt; &lt;h2&gt;Developing for an ultra-lightweight container&lt;/h2&gt; &lt;p&gt;We can do most of the development and testing of a C-based microservice on a mainstream desktop or server Linux installation, or even on Windows 10 using the WSL Linux subsystem. However, as I&amp;#8217;ve said, it&amp;#8217;s a mistake to assume that you can change the standard C library without also changing your application code. Developing for Alpine/MUSL really does require regular testing on that platform, either in a virtual machine (VM) or in a container.&lt;/p&gt; &lt;h3&gt;Testing in a virtual machine&lt;/h3&gt; &lt;p&gt;It&amp;#8217;s trivially easy to run Alpine in a VirtualBox VM on Fedora and others, or even on Microsoft Windows. Careful use of shared folders or network storage allows for sharing source code between the different environments. This is a straightforward and intuitive way to build for a container-like environment: Do most of the development on the desktop and test incrementally in a VM with a comparable platform configuration.&lt;/p&gt; &lt;p&gt;We can do most of the development work without building a container at all because we know that the container&amp;#8217;s platform layer is mostly the same as that in the VM. Of course, you&amp;#8217;ll have to build a container at &lt;em&gt;some&lt;/em&gt; point. It&amp;#8217;s certainly not safe to assume that the application will behave the same in a container as it does in a VM, even with the same platform configuration. Still, doing development in a compatible VM can limit how often you will need to carry out the time-consuming process of building a container.&lt;/p&gt; &lt;h3&gt;Testing (and possibly developing) in a development container&lt;/h3&gt; &lt;p&gt;Provided you&amp;#8217;re happy working with console tools and scripts, it&amp;#8217;s entirely possible to do development work directly in an Alpine container by building the container with all of the development and file-sharing tools you require. You could create a Dockerfile like this:&lt;/p&gt; &lt;pre&gt;FROM alpine:3.12 RUN apk add git build-base rsync &amp;#38;&amp;#38; \ addgroup -g 1000 mygroup &amp;#38;&amp;#38; \ mkdir /myuser &amp;#38;&amp;#38; \ adduser -G mygroup -u 1000 -h /myuser -D myuser &amp;#38;&amp;#38; \ chown -R myuser:mygroup /myuser &amp;#38;&amp;#38; \ USER myuser CMD ["/bin/sh"] &lt;/pre&gt; &lt;p&gt;This code defines a container image that uses Alpine as the base. It then adds the tools needed to do development at the command line and to copy files from one place to another. It also defines a single user with a working directory. Of course, this is only one way to set up a development container—there are many others.&lt;/p&gt; &lt;p&gt;If you run this container interactively (for instance, using &lt;code&gt;podman -it&lt;/code&gt;) then you have an interactive session in the container that you can use to edit and build your code. Of course, if you want to use sophisticated interactive development tools, you will need a much more elaborate container setup.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s vital to understand that the container&amp;#8217;s storage is ephemeral: While the user &lt;code&gt;myuser&lt;/code&gt; can read and write files in the &lt;code&gt;/myuser&lt;/code&gt; directory, these files are not retained. Even experienced developers sometimes forget this, with unhappy results.&lt;/p&gt; &lt;p&gt;I generally use a Git repository as the source of authority for code I&amp;#8217;m working on, whether it&amp;#8217;s in a container or elsewhere. Using the repository is particularly important when working in an environment with no persistent storage.&lt;/p&gt; &lt;h2&gt;Building the production container&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s easy enough to build a development container for testing purposes, but in the end, we want to build the lightest possible container. We certainly don&amp;#8217;t want to include development tools or source code. There are at least two ways to build this type of production container.&lt;/p&gt; &lt;p&gt;First, we can build the binaries using a virtual machine with the appropriate operating system version (Alpine, in this case), or using a container populated with development tools. We make the binaries available in a repository, and then create a Dockerfile that retrieves the binaries.&lt;/p&gt; &lt;p&gt;Second, we can use a multi-stage build, and generate the production container from the development container. This is an entirely self-contained operation, so long as the application&amp;#8217;s source code is available. It&amp;#8217;s a much slower build operation, but it has the advantage of going &lt;em&gt;straight from a source code repository to a production container&lt;/em&gt;. This approach significantly reduces the opportunity for versioning errors.&lt;/p&gt; &lt;p&gt;Multi-stage builds are relatively new to standard container-building tools, so I&amp;#8217;ll provide an example. For more information, see &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;the docker documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;A multi-stage container build&lt;/h2&gt; &lt;p&gt;A multi-stage container build uses the output of one stage as the input to the next. Here is the skeleton of the Dockerfile for &lt;code&gt;solunar_ws&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;FROM alpine:3.12 RUN apk add git build-base tzdata zlib-dev &amp;#38;&amp;#38; \ get https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-latest.tar.gz &amp;#38;&amp;#38; \ tar xfvz libmicrohttpd-latest.tar.gz &amp;#38;&amp;#38; \ (cd libmi*; ./configure; make install) &amp;#38;&amp;#38; \ git clone https://github.com/kevinboone/solunar_ws.git &amp;#38;&amp;#38; \ make -C solunar_ws # Binary solunar_ws ends up in / directory ... FROM alpine:3.12 RUN apk add tzdata COPY --from=0 /solunar_ws/solunar_ws / COPY --from=0 /usr/local/lib/libmicrohttpd.so.12 /usr/local/lib USER 1000 CMD ["/solunar_ws"] &lt;/pre&gt; &lt;h3&gt;The first-stage build&lt;/h3&gt; &lt;p&gt;The first-stage build populates a container image based on Alpine 3.12 with all the build tools it needs. It then downloads the source for libmicrohttpd and builds it, then does the same with &lt;code&gt;solunar_ws&lt;/code&gt;. These sources come from different places, but they&amp;#8217;re all compiled in the same way. In this example, note that we have to build libmicrohttpd before building the web service; that is because the web service depends on it.&lt;/p&gt; &lt;p&gt;This first-stage image is about 210MB in size and might take 30 seconds to a minute to construct, depending on internet bandwidth.&lt;/p&gt; &lt;h3&gt;The second-stage build&lt;/h3&gt; &lt;p&gt;The second stage starts with the same Alpine 3.12 base layer and installs only the packages that are needed at runtime—&lt;code&gt;tzdata&lt;/code&gt; in this case. It then copies from the previous build the two files that the container requires at runtime: The binary &lt;code&gt;solunar_ws&lt;/code&gt; and the library &lt;code&gt;libmicrohttpd.so.12&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s fair to ask why we needed to build libmicrohttpd from source when the Alpine Linux repository already has a binary package for it. The reason is to eliminate the so-called dependency sprawl. The binary package in the repository has nearly 20MB of dependencies, none of which are needed for this application. This &amp;#8220;sprawl&amp;#8221; is a relatively common side-effect of using general repositories. An alternative to building from source would be to install the binary package and just pick out the specific dependencies we require. In this case, such an approach isn&amp;#8217;t as easy as building the dependency from source, but sometimes it might be.&lt;/p&gt; &lt;p&gt;In this example, I&amp;#8217;ve used &lt;code&gt;USER 1000&lt;/code&gt; without defining any user. That&amp;#8217;s reasonable in a production container when there will never be a need for the running process to modify any files in the container.&lt;/p&gt; &lt;p&gt;The output of the second stage is an image, in this case, of about 10MB in size.&lt;/p&gt; &lt;h2&gt;Deploying on OpenShift&lt;/h2&gt; &lt;p&gt;I don&amp;#8217;t want to say too much about deployment, because it isn&amp;#8217;t substantially different for a C application than for a Java application, or anything else.&lt;/p&gt; &lt;p&gt;Once we have the production container image, there are many ways to deploy it on OpenShift. In fact, on OpenShift 4, we can build directly from a Dockerfile, provided that all the resources the Dockerfile needs are in repositories.&lt;/p&gt; &lt;p&gt;The README file in the source bundle for &lt;code&gt;solunar_ws&lt;/code&gt; explains in outline how to push the constructed production pod from the development system to the &lt;a target="_blank" rel="nofollow" href="http://www.quay.io"&gt;Red Hat Quay&lt;/a&gt; repository. Once the image is in a repository, you can create a default deployment using &lt;code&gt;oc new-app&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc new-app --docker-image=quay.io/kboone/solunar_ws:latest \ --name=solunar-ws -l app=solunar-ws&lt;/pre&gt; &lt;p&gt;For finer control, you can create a deployment configuration by running &lt;code&gt;oc create -f&lt;/code&gt;on a YAML file, something like this:&lt;/p&gt; &lt;pre&gt; kind: DeploymentConfig apiVersion: apps.openshift.io/v1 metadata: name: solunar-ws spec: replicas: 1 strategy: type: Rolling selector: name: solunar-ws template: metadata: name: solunar-ws labels: name: solunar-ws spec: containers: - env: - name: SOLUNAR_WS_LOG_LEVEL value: "1" name: solunar-ws image: quay.io/kboone/solunar_ws:latest imagePullPolicy: Always ports: - containerPort: 8080 protocol: TCP livenessProbe: failureThreshold: 3 initialDelaySeconds: 30 periodSeconds: 10 successThreshold: 1 tcpSocket: port: 8080 timeoutSeconds: 1 readinessProbe: failureThreshold: 3 initialDelaySeconds: 30 periodSeconds: 10 successThreshold: 1 tcpSocket: port: 8080 timeoutSeconds: 1 resources: limits: memory: 128Mi securityContext: privileged: false --- kind: Service apiVersion: v1 metadata: name: solunar-ws spec: ports: - name: solunar-ws port: 8080 protocol: TCP targetPort: 8080 selector: name: solunar-ws &lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve set a simple TCP port test for the liveness and readiness probes, given that it&amp;#8217;s likely that the application will be ready within a millisecond of this port being open.&lt;/p&gt; &lt;h2&gt;Results&lt;/h2&gt; &lt;p&gt;To test the web service using a browser, you&amp;#8217;ll need to expose the &lt;code&gt;solunar-ws&lt;/code&gt; service as a route. You can do this using the OpenShift console, the &lt;code&gt;oc create route&lt;/code&gt; command, or in a number of other ways. Figure 1 shows what the JSON output looks like in a browser.&lt;/p&gt; &lt;div id="attachment_769177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png"&gt;&lt;img aria-describedby="caption-attachment-769177" class="wp-image-769177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png" alt="The program's output as viewed in a browser." width="640" height="610" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png 888w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output-300x286.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output-768x733.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769177" class="wp-caption-text"&gt;Figure 1. Output for the solunar-ws service.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Here are the memory usage figures from within the running pod:&lt;/p&gt; &lt;pre&gt;%top -S PID VSZ VSZRW RSS (SHR) DIRTY (SHR) STACK COMMAND 1 1384 508 860 480 92 0 132 /solunar_ws &lt;/pre&gt; &lt;p&gt;Yes, those memory figures are in &lt;em&gt;kilobytes&lt;/em&gt;. What these memory figures don&amp;#8217;t show is the sub-millisecond startup time.&lt;/p&gt; &lt;h2&gt;Closing remarks&lt;/h2&gt; &lt;p&gt;The purpose of this exercise has been to examine how small a web service can be made in a container, using C code and an ultra-lightweight base layer. However, I have to point out that, although it&amp;#8217;s &lt;em&gt;possible&lt;/em&gt; to create a tiny container, it isn&amp;#8217;t necessarily &lt;em&gt;advisable&lt;/em&gt;. In particular, this container image has no diagnostic tools of any kind. In addition, examining a core dump from a container like this will be an unhappy experience for anyone without a development environment that perfectly matches the container&amp;#8217;s base layer. As ever, there are trade-offs to be made between efficiency and serviceability.&lt;/p&gt; &lt;p&gt;Finally, I&amp;#8217;m not advocating a wholesale return to C for middleware installations—only that it&amp;#8217;s something that&amp;#8217;s still worth considering for some parts of some applications. At the very least, examining what is involved in implementing this service in C makes us appreciate Java a whole lot more.&lt;/p&gt; &lt;h2&gt;Acknowledgments&lt;/h2&gt; &lt;p&gt;I&amp;#8217;d like to thank &lt;a href="https://developers.redhat.com/blog/author/fvaleri/"&gt;Federico Valeri&lt;/a&gt; for his helpful comments on this article, and for convincing me that it was worth writing it.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#038;title=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/" data-a2a-title="Developing micro-microservices in C on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/"&gt;Developing micro-microservices in C on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fPAbaHp29kk" height="1" width="1" alt=""/&gt;</content><summary>Java holds its dominating position in enterprise middleware for good reasons; however, describing anything in Java as “micro” requires a generous interpretation. It isn’t unusual to find Java-based microservices that need half a gigabyte of RAM to provide modest functionality at a modest load. The trend toward serverless architectures, where services are started and stopped according to demand, do...</summary><dc:creator>kboone</dc:creator><dc:date>2020-08-27T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Shift Remote 2020 - DevOps Heroes on Dec 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LwxtNO72Ja0/shift-remote-2020-devops-heroes-dec-8.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-shift_remote_2020_devops_heroes_on_dec_8</id><updated>2020-08-27T05:00:05Z</updated><published>2020-08-27T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://remote.shiftconf.co/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="Shift Remote" border="0" data-original-height="240" data-original-width="540" src="https://1.bp.blogspot.com/-LdFuV1_BO5I/Xxgy2Er3ykI/AAAAAAAAxSw/npD2T4TnLhoBo23p05cY_CmFwxMHfB2lwCNcBGAsYHQ/s320/Screenshot%2B2020-07-22%2Bat%2B14.35.53.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;I &lt;a href="https://www.schabell.org/2020/07/shift-remote-2020-devops-heroes.html" target="_blank"&gt;mentioned a few weeks ago&lt;/a&gt; that I was invited to speak for the newly virtualized Shift Developer conference called &lt;a href="https://remote.shiftconf.co/" target="_blank"&gt;Shift Remote&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;At the time it was not yet fully planned out and the exact date and times were yet to be finalized.&lt;br /&gt;&lt;br /&gt;Well, now we have a set schedule and I'll be coming at you online with a DevOps focused session on helping you become a DevOps hero by adding some new tools to your toolbox.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Let's take a look at what this online event looks like shall we?&lt;/div&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-h5IdiMeoyjY/X0T76jlAY5I/AAAAAAAAxcE/k2FDlO2aBAYL7SFor_7OwsgXnFmWDMXFwCNcBGAsYHQ/s1600/Screenshot%2B2020-08-25%2Bat%2B13.44.11.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Shift Remote" border="0" data-original-height="431" data-original-width="543" height="158" src="https://1.bp.blogspot.com/-h5IdiMeoyjY/X0T76jlAY5I/AAAAAAAAxcE/k2FDlO2aBAYL7SFor_7OwsgXnFmWDMXFwCNcBGAsYHQ/s200/Screenshot%2B2020-08-25%2Bat%2B13.44.11.png" title="" width="200" /&gt;&lt;/a&gt;First off, the talk and abstract are online for the event. Head over to the event site and &lt;a href="https://remote.shiftconf.co/#schedule" target="_blank"&gt;check the schedule, looking for E11&lt;/a&gt; (event 11) being hosted on Dec 8, 2020. You should find the following listed:&lt;br /&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;DevOps Heroes - Adding advanced automation to your toolbox&lt;/h3&gt;&lt;div&gt;&lt;i&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It's also about organizational change and integration of many subtle processes that help you to deliver applications seamlessly from development to production through your operations.Let's unlock the power of process integration with a getting started walk through of a free online hands-on workshop that adds advanced automation to your devops toolbox. We'll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you'll learn how to build a data model, create an automated process, integrate user approval tasks, and more using modern open source process automation tooling. No experience in automation integration is required. Join us for a short session that helps you in adding a new tool to your devops toolbox.&lt;/i&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-c2CpRbyTjGI/X0T8BCm4i1I/AAAAAAAAxcI/2jWnilPXzkgowY6bAaFdPrZKA9wgQEe_wCNcBGAsYHQ/s1600/Screenshot%2B2020-08-25%2Bat%2B13.43.59.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Shift Remote" border="0" data-original-height="551" data-original-width="1048" height="168" src="https://1.bp.blogspot.com/-c2CpRbyTjGI/X0T8BCm4i1I/AAAAAAAAxcI/2jWnilPXzkgowY6bAaFdPrZKA9wgQEe_wCNcBGAsYHQ/s320/Screenshot%2B2020-08-25%2Bat%2B13.43.59.png" title="" width="320" /&gt;&lt;/a&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Topic: DevOps&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Date: Dec 8, 2020&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 19:15-19:35&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;The session will take place in their DevOps week, should be recorded and on-demand after the event, while the targeted&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;workshop is online and available&lt;/a&gt;&amp;nbsp;to you today.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Stay tuned and see you there!&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4ohN5ImTqkw:d7t0Twdp7_M:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4ohN5ImTqkw:d7t0Twdp7_M:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4ohN5ImTqkw:d7t0Twdp7_M:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4ohN5ImTqkw:d7t0Twdp7_M:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4ohN5ImTqkw:d7t0Twdp7_M:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/4ohN5ImTqkw" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LwxtNO72Ja0" height="1" width="1" alt=""/&gt;</content><summary>I mentioned a few weeks ago that I was invited to speak for the newly virtualized Shift Developer conference called Shift Remote. At the time it was not yet fully planned out and the exact date and times were yet to be finalized. Well, now we have a set schedule and I'll be coming at you online with a DevOps focused session on helping you become a DevOps hero by adding some new tools to your toolb...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-08-27T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/4ohN5ImTqkw/shift-remote-2020-devops-heroes-dec-8.html</feedburner:origLink></entry><entry><title>JBoss Weekly Editorial 27 August 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/18x4Adm38qw/weekly-2020-08-27.html" /><category term="AMQ" scheme="searchisko:content:tags" /><category term="Automation" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Strimzi" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-jboss_weekly_editorial_27_august_2020</id><updated>2020-08-27T00:00:00Z</updated><published>2020-08-27T00:00:00Z</published><content type="html">&lt;article class="" data-tags="openshift, openjdk, amq, strimzi, automation, kubernetes, keycloak"&gt; &lt;h1&gt;JBoss Weekly Editorial 27 August 2020&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another edition of the JBoss Weekly Editorial! Summer is drawing to a close, but that doesn’t mean Red Hat has been resting, or that nothing has been happening over the past two weeks. There’s been some great movement and progress made, which we’ll cover. In this edition we’re going to focus on OpenShift, the blogosphere, and finally, other project news.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_openshift"&gt;OpenShift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Last week was KubeCon Europe 2020, which as you can guess, was a big event for OpenShift! We had 15 speakers from Red Hat speaking over the three days, giving 17 talks. A number of new announcements, blog posts, and articles came out during KubeCon Europe 2020, They’re all liked at &lt;a href="https://www.openshift.com/kubecon"&gt;the OpenShift event page&lt;/a&gt;. There’s simply too many to link here. The above event page has videos, press release links, links to other announcements and blogs.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_blogs"&gt;Blogs&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Continuing the trend about OpenShift, Paul Vergilis wrote about external clients and Red Hat AMQ over at the &lt;a href="https://developers.redhat.com/blog/2020/08/26/connecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift/"&gt;Red Hat Developer blog&lt;/a&gt;. If you’re interested in getting started with Strimzi, Apache Kafka on Kubernetes, you’ll want to catch up on the blog post Paolo Patierno and Jakub Scholz wrote: &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-strimzi-apache-kafka-on-kubernetes-kubecon-europe-2020/"&gt;Introduction to Strimzi: Apache Kafka on Kubernetes (KubeCon Europe 2020)&lt;/a&gt;. For those of you running OpenJDK 8, you’ll want to know more about JDK Flight Recorder available in OpenJDK 8u262. An indepth intro is available at the &lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/"&gt;Red Hat Developer Blog&lt;/a&gt; written by Mario Torre.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_projects"&gt;Projects&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;To wrap up this edition, we will be looking at two announcements from Keycloak:&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.keycloak.org//2020/08/keycloak-1101-released.html"&gt;Keycloak 11.0.1 released&lt;/a&gt; - fixing seven bugs&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.keycloak.org//2020/08/sunsetting-louketo-project.adoc.html"&gt;Sunsetting Louketo Project&lt;/a&gt; - Bruno Oliveira discusses the reasons in this blog post.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;We’re natuarally happy for a new release and sad for Louketo.&lt;/p&gt; &lt;p&gt;Thanks for being here with us in this edition! We look forward to seeing you again in two weeks.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/jason-porter.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Jason Porter&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/18x4Adm38qw" height="1" width="1" alt=""/&gt;</content><summary>JBoss Weekly Editorial 27 August 2020 Welcome to another edition of the JBoss Weekly Editorial! Summer is drawing to a close, but that doesn’t mean Red Hat has been resting, or that nothing has been happening over the past two weeks. There’s been some great movement and progress made, which we’ll cover. In this edition we’re going to focus on OpenShift, the blogosphere, and finally, other project ...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2020-08-27T00:00:00Z</dc:date><feedburner:origLink>https://www.jboss.org/posts/weekly-2020-08-27.html</feedburner:origLink></entry><entry><title>Connecting external clients to Red Hat AMQ Broker on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/n-KevXCaiUc/" /><category term="activemq" scheme="searchisko:content:tags" /><category term="amqp" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="keystore" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="Stream Processing" scheme="searchisko:content:tags" /><category term="truststore" scheme="searchisko:content:tags" /><author><name>Paul Vergilis</name></author><id>searchisko:content:id:jbossorg_blog-connecting_external_clients_to_red_hat_amq_broker_on_red_hat_openshift</id><updated>2020-08-26T07:00:10Z</updated><published>2020-08-26T07:00:10Z</published><content type="html">&lt;p&gt;Developers deploying &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ&lt;/a&gt; on &lt;a href="https://developers.redhat.com/products/openshift"&gt;Red Hat OpenShift&lt;/a&gt; often wonder how to connect external clients to AMQ Broker using the Transport Layer Security (TLS) protocol, which is an improved successor to the Secure Sockets Layer (SSL) protocol.&lt;/p&gt; &lt;p&gt;In this article, you will learn how to do just that. The steps are as follows:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Generate TLS credentials.&lt;/li&gt; &lt;li&gt;Install the AMQ Broker Operator.&lt;/li&gt; &lt;li&gt;Deploy an AMQ Broker instance.&lt;/li&gt; &lt;li&gt;Define an Advanced Message Queuing Protocol (AMQP) acceptor that uses TLS.&lt;/li&gt; &lt;li&gt;Create an Anycast address.&lt;/li&gt; &lt;li&gt;Connect an external AMQP client and send and receive messages.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To follow the examples in this article, you will need:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform (OCP)&lt;/a&gt; 4.3 or higher.&lt;/li&gt; &lt;li&gt;Cluster admin access for the OCP installation.&lt;/li&gt; &lt;li&gt;Familiarity with &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/cli_reference/openshift_cli/getting-started-cli.html"&gt;&lt;code&gt;oc&lt;/code&gt;, the OpenShift command-line interface (CLI&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let&amp;#8217;s get started.&lt;/p&gt; &lt;h2&gt;Part 1: Generating credentials for TLS connections&lt;/h2&gt; &lt;p&gt;In this section, we configure a one-way TLS connection and create and store our TLS credentials.&lt;/p&gt; &lt;h3&gt;One-way TLS&lt;/h3&gt; &lt;p&gt;One-way TLS is the most common way to verify the authenticity of the server that you are accessing and form a secure channel to it. In this authentication mechanism, the content being verified is the authenticity of the server itself. The client is never verified.&lt;/p&gt; &lt;h3&gt;Storing TLS credentials&lt;/h3&gt; &lt;p&gt;When deploying AMQ broker(s) to OpenShift, any defined connectors that are secured via TLS must store the TLS credentials. You can use any of the following secret mechanisms to store the credentials:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A &lt;code&gt;broker.ks&lt;/code&gt;, which must be a Base64-encoded keystore.&lt;/li&gt; &lt;li&gt;A &lt;code&gt;client.ts&lt;/code&gt;, which must be a Base64-encoded truststore.&lt;/li&gt; &lt;li&gt;A &lt;code&gt;keyStorePassword&lt;/code&gt;, which must be specified in raw text.&lt;/li&gt; &lt;li&gt;A &lt;code&gt;trustStorePasswordspecified&lt;/code&gt;, which must be specified in raw text.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For TLS connections, AMQ requires a broker keystore, a client keystore, and a client truststore that includes the broker keystore. In the next section, we will create a broker keystore, export the broker certificate, create a client truststore, import the broker certificate into the client truststore, and then create a broker truststore.&lt;/p&gt; &lt;h3&gt;Step 1: Create the broker keystore&lt;/h3&gt; &lt;p&gt;Note that I&amp;#8217;m using the &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html"&gt;Java Keytool&lt;/a&gt; to generate the necessary certificates and stores for this example. First, generate a self-signed certificate for the broker keystore. When asked for a password, use &lt;code&gt;password&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ keytool -genkey -alias broker -keyalg RSA -keystore broker.ks&lt;/pre&gt; &lt;p&gt;Next, export the certificate so that it can be shared with clients:&lt;/p&gt; &lt;pre&gt;$ keytool -export -alias broker -keystore broker.ks -file broker_cert&lt;/pre&gt; &lt;p&gt;Create a client truststore that imports the broker certificate:&lt;/p&gt; &lt;pre&gt;$ keytool -import -alias broker -keystore client.ts -file broker_cert&lt;/pre&gt; &lt;p&gt;Generate a self-signed certificate for the broker trust store:&lt;/p&gt; &lt;pre&gt;$ keytool -genkey -alias broker -keyalg RSA -keystore broker.ts&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: When you import the &lt;code&gt;broker_cert&lt;/code&gt; make sure that you specify &lt;code&gt;yes&lt;/code&gt; to the dialog: &lt;code&gt;Trust this certificate? [no]:  yes&lt;/code&gt;. The default setting is &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Step 2: Create the secret name&lt;/h3&gt; &lt;p&gt;In this example, we create the secret &lt;i&gt;after&lt;/i&gt; generating the certificates and stores. By default, the secret name has the following format:&lt;/p&gt; &lt;pre&gt;&amp;#60;CustomResourceName&amp;#62;-&amp;#60;AcceptorName&amp;#62;-secret&lt;/pre&gt; &lt;p&gt;Following this format, I have named this secret &lt;code&gt;ex-aao-amqp-secret&lt;/code&gt;. You can use whatever naming format you like. We will provide this secret name in the custom resource for ActiveMQ Artemis, which we&amp;#8217;ll use to deploy the broker shortly.&lt;/p&gt; &lt;h2&gt;Part 2: Configuring OpenShift&lt;/h2&gt; &lt;p&gt;Next, we log into our OpenShift cluster as a system admin, create a project named &lt;code&gt;amq-broker-ssl&lt;/code&gt;, and create a secret for the project (in my case, &lt;code&gt;ex-aao-amqp-secret&lt;/code&gt;). Note that I&amp;#8217;m using OpenShift 4.4 for this example.&lt;/p&gt; &lt;h3&gt;Step 1: Create the project and secret&lt;/h3&gt; &lt;p&gt;Log into OpenShift by entering the command:&lt;/p&gt; &lt;pre&gt;$ oc login &amp;#60;CLUSTER_API_URL&amp;#62;&lt;/pre&gt; &lt;p&gt;Create a new project:&lt;/p&gt; &lt;pre&gt;$ oc new-project amq-broker-ssl&lt;/pre&gt; &lt;p&gt;Create the secret:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic ex-aao-amqp-secret \ --from-file=broker.ks \ --from-literal=keyStorePassword=password \ --from-file=client.ts=broker.ts \ --from-literal=trustStorePassword=password &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: In the snippet&lt;code&gt;--from-file=client.ts=broker.ts&lt;/code&gt;, we provide the &lt;code&gt;broker.ts&lt;/code&gt;, which is correct. However, we&amp;#8217;re aliasing it in the secret as &lt;code&gt;client.ts&lt;/code&gt;. The alias is the value that the broker image looks for in the secret.&lt;/p&gt; &lt;h3&gt;Step 2: Open the project in OpenShift&lt;/h3&gt; &lt;p&gt;Next, log in to the OpenShift console and click on &lt;b&gt;Projects&lt;/b&gt;. As shown in Figure 1, you&amp;#8217;ll see the project that we&amp;#8217;ve just created.&lt;/p&gt; &lt;div id="attachment_767667" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig1-1.png"&gt;&lt;img aria-describedby="caption-attachment-767667" class="wp-image-767667 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig1-1-1024x326.png" alt="The amq-broker-ssl project highlighted in the OpenShift console's Projects screen." width="640" height="204" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig1-1-1024x326.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig1-1-300x95.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig1-1-768x244.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-767667" class="wp-caption-text"&gt;Figure 1: Find and click your new project in the OpenShift console&amp;#8217;s Projects screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 2 shows the project details.&lt;/p&gt; &lt;div id="attachment_767677" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767677" class="wp-image-767677 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig2-1024x742.png" alt="Details of the amq-broker-ssl project with &amp;#34;10 Secrets&amp;#34; highlighted" width="640" height="464" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig2-1024x742.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig2-300x217.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig2-768x557.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig2.png 1581w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767677" class="wp-caption-text"&gt;Figure 2: Click the project&amp;#8217;s secrets to view them.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;b&gt;Secrets&lt;/b&gt; in the &lt;b&gt;Inventory&lt;/b&gt; panel shown in Figure 2. Find the &lt;code&gt;ex-aao-amqp-secret&lt;/code&gt;, which appears in the list of secrets shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_767687" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767687" class="wp-image-767687 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig3-1024x601.png" alt="A list of secrets for the amq-broker-ssl project with ex-aao-amqp-secret highlighted" width="640" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig3-1024x601.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig3-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig3-768x451.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig3.png 1311w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767687" class="wp-caption-text"&gt;Figure 3: Click the secret to view details.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you drill into &lt;code&gt;ex-aao-amqp-secret&lt;/code&gt;, as shown in Figure 4, you&amp;#8217;ll see &lt;code&gt;broker.ks&lt;/code&gt;, &lt;code&gt;client.ts&lt;/code&gt;, and their respective passwords, which we supplied when we created the secret.&lt;/p&gt; &lt;div id="attachment_767697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767697" class="wp-image-767697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig4-1024x924.png" alt="ex-aao-amqp-secret details screen " width="640" height="578" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig4-1024x924.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig4-300x271.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig4-768x693.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig4.png 1309w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767697" class="wp-caption-text"&gt;Figure 4: View secret details to verify broker.ks, client.ts, keyStorePassword and trustStorePasswords were added.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We’ve created our TLS credentials and stored them in a namespace secret. Next, let&amp;#8217;s install AMQ Broker.&lt;/p&gt; &lt;h2&gt;Part 3: Installing AMQ&lt;/h2&gt; &lt;p&gt;In this section, we install the AMQ Broker Operator from the OperatorHub into our OpenShift cluster. To install the Operator, you must have cluster-admin privileges for the OpenShift cluster.&lt;/p&gt; &lt;p&gt;Before we install AMQ Broker, let&amp;#8217;s first look at what it is.  Below is a brief overview, if you would like to learn more about AMQ Broker and other AMQ offerings, go to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.7/html/introducing_red_hat_amq_7/index"&gt;Red Hat AMQ 7&lt;/a&gt;&lt;/p&gt; &lt;p&gt;AMQ Broker is a high-performance messaging implementation based on ActiveMQ Artemis. It uses an asynchronous journal for fast message persistence and supports multiple languages, protocols, and platforms.&lt;/p&gt; &lt;p&gt;Red Hat AMQ Broker 7.7 (the latest version as of this article) is available as a containerized image that is provided for use with OpenShift Container Platform (OCP) 3.11 and later.&lt;/p&gt; &lt;p&gt;AMQ Broker on OCP provides similar functionality to Red Hat AMQ Broker, but some aspects of the functionality need to be configured specifically for use with OpenShift Container Platform.&lt;/p&gt; &lt;h3&gt;Install the AMQ Broker Operator&lt;/h3&gt; &lt;p&gt;Log in to the web console as a cluster admin. On the left-side navigation bar, expand &lt;b&gt;Operators&lt;/b&gt; and click on &lt;b&gt;OperatorHub&lt;/b&gt;. In the search field, type &lt;b&gt;AMQ&lt;/b&gt;, and select the &lt;b&gt;Red Hat Integration – AMQ Broker&lt;/b&gt; tile, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_767717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767717" class="wp-image-767717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig5-1024x746.png" alt="OpenShift OperatorHub with Red Hat Integration - AMQ Broker highlighted" width="640" height="466" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig5-1024x746.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig5-300x219.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig5-768x560.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig5.png 1269w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767717" class="wp-caption-text"&gt;Figure 5: Find and click the Operator in the OpenShift OperatorHub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;On the installation screen, click the &lt;b&gt;Install&lt;/b&gt; button, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_767757" style="width: 565px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767757" class="wp-image-767757" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig6-1.png" alt="The Red Hat Integration - AMQ Broker screen with the Install button highlighted" width="555" height="617" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig6-1.png 905w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig6-1-270x300.png 270w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig6-1-768x854.png 768w" sizes="(max-width: 555px) 100vw, 555px" /&gt;&lt;p id="caption-attachment-767757" class="wp-caption-text"&gt;Figure 6: Click Install to install the Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Be sure to select a specific namespace on the cluster and keep the defaults for the &lt;b&gt;Update channel&lt;/b&gt; and &lt;b&gt;Approval strategy&lt;/b&gt;. Select &lt;code&gt;amq-broker-ssl&lt;/code&gt; under &lt;b&gt;Installed Namespace*&lt;/b&gt;, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_767747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767747" class="wp-image-767747 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig7-1024x760.png" alt="The Install Operator dialog box with &amp;#34;A specific namespace on the cluster&amp;#34; highlighted" width="640" height="475" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig7-1024x760.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig7-300x223.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig7-768x570.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig7.png 1192w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767747" class="wp-caption-text"&gt;Figure 7: Select your specific namespace and then click install to add the AMQ Broker Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Wait a few minutes for the Operator to install. Once it has successfully installed, you should see the status change to &lt;b&gt;Succeeded&lt;/b&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_767777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8.png"&gt;&lt;img aria-describedby="caption-attachment-767777" class="wp-image-767777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8-1024x334.png" alt="The Installed Operators screen with &amp;#34;Succeeded&amp;#34; highlighted." width="640" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8-1024x334.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8-300x98.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8-768x251.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig8.png 1283w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-767777" class="wp-caption-text"&gt;Figure 8: Verify that AMQ Broker Operator is successfully installed.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Part 4: Deploying the AMQ Broker&lt;/h2&gt; &lt;p&gt;Next, we will deploy a broker with a defined &lt;a target="_blank" rel="nofollow" href="https://www.amqp.org"&gt;AMQP&lt;/a&gt; connector secured with TLS.&lt;/p&gt; &lt;h3&gt;Step 1: Create the AMQ Broker instance&lt;/h3&gt; &lt;p&gt;While on the &lt;b&gt;Installed Operators&lt;/b&gt; page, click the &lt;b&gt;Red Hat Integration &amp;#8211; AMQ Broker&lt;/b&gt; link to see the Operator details shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_767787" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9.png"&gt;&lt;img aria-describedby="caption-attachment-767787" class="wp-image-767787 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9-1024x332.png" alt="The Installed Operators screen with Red Hat Integration - AMQ Broker highlighted." width="640" height="208" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9-1024x332.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9-300x97.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9-768x249.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig9.png 1290w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-767787" class="wp-caption-text"&gt;Figure 9: Click the Operator&amp;#8217;s name to view its details.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the Operator details, you&amp;#8217;ll see tiles for each of the Operator APIs. Click on the &lt;b&gt;Create Instance&lt;/b&gt; link inside the &lt;b&gt;AMQ Broker&lt;/b&gt; tile, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_767797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767797" class="wp-image-767797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig10-1024x649.png" alt="The Operator Details page for the AMQ Broker Operator with AMQ Broker highlighted." width="640" height="406" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig10-1024x649.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig10-300x190.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig10-768x487.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig10.png 1302w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767797" class="wp-caption-text"&gt;Figure 10: Find the Operator API you want to use and click Create Instance beneath it.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Create the ActiveMQ Artemis instance&lt;/h3&gt; &lt;p&gt;Now, copy and paste the &lt;b&gt;ActiveMQArtemis&lt;/b&gt; custom resource below into the &lt;b&gt;Create ActiveMQArtemis&lt;/b&gt; YAML editor. Notice the acceptors stanza in the YAML file, where we define the AMQP acceptor:&lt;/p&gt; &lt;pre&gt;apiVersion: broker.amq.io/v2alpha2 kind: ActiveMQArtemis metadata: name: ex-aao spec: deploymentPlan: size: 1 image: registry.redhat.io/amq7/amq-broker:7.6 requireLogin: false adminUser: admin adminPassword: admin console: expose: true acceptors: - name: amqp protocols: amqp port: 5672 sslEnabled: true sslSecret: ex-aao-amqp-secret verifyHost: false expose: true &lt;/pre&gt; &lt;p&gt;Also, note that I set &lt;code&gt;sslEnabled: true&lt;/code&gt;. When you set &lt;code&gt;sslEnabled: true&lt;/code&gt; for an acceptor, you&amp;#8217;ll need to specify the named secret that contains the keys &lt;code&gt;broker.ks&lt;/code&gt;,  &lt;code&gt;client.ts&lt;/code&gt;,  &lt;code&gt;keyStorePassword&lt;/code&gt;,  and &lt;code&gt;trustStorePassword&lt;/code&gt;. The broker image will look for these in the named secret. If they&amp;#8217;re not present, OpenShift will fail to schedule the broker pod until it finds them.&lt;/p&gt; &lt;p&gt;As shown in Figure 11, I specified the name of the secret as &lt;code&gt;sslSecret: ex-aao-amqp-secret&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_767817" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767817" class="wp-image-767817 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig11-1-1024x926.png" alt="The Create ActiveMQArtemis screen" width="640" height="579" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig11-1-1024x926.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig11-1-300x271.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig11-1-768x695.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig11-1.png 1300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767817" class="wp-caption-text"&gt;Figure 11: Create the ActiveMQ Artemis instance.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When you are done editing the file, click &lt;b&gt;Create&lt;/b&gt;. You&amp;#8217;ll see an instance of the broker that we just created. Click on the &lt;b&gt;ex-aao&lt;/b&gt; link to see the &lt;b&gt;AMQ Broker Overview&lt;/b&gt; that is shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_767827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767827" class="wp-image-767827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig12-1024x427.png" alt="The ActiveMQArtemis Operator Details screen with ex-aao highlighted" width="640" height="267" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig12-1024x427.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig12-300x125.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig12-768x321.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig12.png 1313w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767827" class="wp-caption-text"&gt;Figure 12: Click the new broker instance in the ActiveMQArtemis Operator Details screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 13, the pod status indicates that one pod is ready.&lt;/p&gt; &lt;div id="attachment_767847" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig13.png"&gt;&lt;img aria-describedby="caption-attachment-767847" class="wp-image-767847" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig13.png" alt="The AMQ Broker Overview screen showing that the new pod is ready." width="640" height="528" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig13.png 971w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig13-300x247.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig13-768x634.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-767847" class="wp-caption-text"&gt;Figure 13: View the status of your new pod in the AMQ Broker Overview screen.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Create the AMQ Broker address&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll define our address &lt;code&gt;test.foo&lt;/code&gt;, from which our client applications will send and receive messages. Click on &lt;b&gt;Installed Operators&lt;/b&gt; under &lt;b&gt;Operators&lt;/b&gt; in the left-hand navigation panel and drill into the &lt;b&gt;Red Hat Integration &amp;#8211; AMQ Broker&lt;/b&gt;. Then, click the &lt;b&gt;Create Instance&lt;/b&gt; link in the &lt;b&gt;AMQ Broker Address&lt;/b&gt; tile, as shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_767887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767887" class="wp-image-767887 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig14-1024x758.png" alt="The Red Hat Integration - AMQ Broker installed Operators details page with the Create Instance link under ActiveMQ Artemis Address highlighted" width="640" height="474" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig14-1024x758.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig14-300x222.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig14-768x568.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig14.png 1220w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767887" class="wp-caption-text"&gt;Figure 14: Click Create Instance to view the configuration before proceeding.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Copy and paste the following YAML for the &lt;b&gt;ActiveMQArtemisAddress&lt;/b&gt; custom resource into the YAML editor:&lt;/p&gt; &lt;pre&gt;apiVersion: broker.amq.io/v2alpha1 kind: ActiveMQArtemisAddress metadata: name: ex-aao-address-test-foo spec: addressName: test.foo queueName: test.foo routingType: anycast &lt;/pre&gt; &lt;p&gt;Click &lt;b&gt;Create&lt;/b&gt; when you are done, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_767897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-767897" class="wp-image-767897 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig15-1024x924.png" alt="Create ActiveMQArtemisAddress screen" width="640" height="578" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig15-1024x924.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig15-300x271.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig15-768x693.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig15.png 1312w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-767897" class="wp-caption-text"&gt;Figure 15: Create your ActiveMQArtemisAddress instance.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ve created an address named &lt;code&gt;test.foo&lt;/code&gt; on the running broker pod which will create a point-to-point message queue. Next, we&amp;#8217;ll test the ability to send and receive messages.&lt;/p&gt; &lt;h2&gt;Part 5: Sending and receiving messages&lt;/h2&gt; &lt;p&gt;For this part of the example, I am using the out-of-the-box ActiveMQ Artemis CLI client to send and receive messages. The CLI client comes bundled in the &lt;a target="_blank" rel="nofollow" href="https://activemq.apache.org/components/artemis/download/"&gt;Apache ActiveMQ Artemis distribution&lt;/a&gt;. Once you&amp;#8217;ve downloaded the distribution and unzipped or un-tarred it to a directory, you&amp;#8217;ll find the &lt;code&gt;artemis&lt;/code&gt; executable in the &lt;code&gt;bin&lt;/code&gt; directory. From there, you can run the commands in the following steps.&lt;/p&gt; &lt;h3&gt;Step 1: Produce messages&lt;/h3&gt; &lt;p&gt;Send 10 messages to &lt;code&gt;test.foo&lt;/code&gt; using the following command (change the URL and location of the truststore if yours is different from the one in my example).  If you recall, in the &lt;b&gt;ActiveMQArtemis&lt;/b&gt; custom resource where we defined our protocol as &lt;code&gt;amqp&lt;/code&gt;, we set &lt;code&gt;expose: true&lt;/code&gt;, which created a service and route. The URL I&amp;#8217;m using is derived from the location specified in the &lt;code&gt;ex-aao-amqp-0-svc-rte&lt;/code&gt; route, replacing the &lt;code&gt;https&lt;/code&gt; with &lt;code&gt;amqps&lt;/code&gt; and adding port 443:&lt;/p&gt; &lt;pre&gt;$ ./bin/artemis producer --url 'amqps://ex-aao-amqp-0-svc-rte-amq-broker-ssl.apps.ocp42.lab.example:443?jms.username=admin&amp;#38;jms.password=admin&amp;#38;transport.trustStoreLocation=/opt/playground/amq76-ocp-deploy/client.ts&amp;#38;transport.trustStorePassword=password&amp;#38;transport.verifyHost=false' --threads 1 --protocol amqp --message-count 10 --destination 'queue://test.foo' Producer ActiveMQQueue[test.foo], thread=0 Produced: 10 messages Producer ActiveMQQueue[test.foo], thread=0 Elapsed time in second : 0 s Producer ActiveMQQueue[test.foo], thread=0 Elapsed time in milli second : 192 milli seconds &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You&amp;#8217;ll need to change the URL and location of &lt;code&gt;client.ts&lt;/code&gt;. If you used a different password, change that too.&lt;/p&gt; &lt;h3&gt;Step 2: View the messages in the AMQ Broker console&lt;/h3&gt; &lt;p&gt;If you recall, when we created the broker using the &lt;b&gt;ActiveMQArtemis&lt;/b&gt; custom resource, we set the following attribute to expose the broker console:&lt;/p&gt; &lt;pre&gt;console: expose: true &lt;/pre&gt; &lt;p&gt;The broker pod in our deployment has a service that provides access to the console. This service has a corresponding route, &lt;code&gt;ex-aao-wconsj-0-svc-rte&lt;/code&gt;. To get the URL to access the broker console, Click on  &lt;strong&gt;Routes &lt;/strong&gt;under &lt;strong&gt;Networking&lt;/strong&gt; over on the left navigation pane&lt;b&gt;. &lt;/b&gt;You&amp;#8217;ll see two routes. Click the link that corresponds to this route as shown in Figure 16&lt;/p&gt; &lt;div id="attachment_768067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-768067" class="wp-image-768067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig16-1-1024x404.png" alt="Routes screen with the ex-aao route circled." width="640" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig16-1-1024x404.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig16-1-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig16-1-768x303.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-768067" class="wp-caption-text"&gt;Figure 16: Click the Location for the route you want.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Clicking the link opens a page that renders another link to the &lt;b&gt;Management Console&lt;/b&gt;. Click the link, which is shown in Figure 17.&lt;/p&gt; &lt;div id="attachment_737117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig18.png"&gt;&lt;img aria-describedby="caption-attachment-737117" class="wp-image-737117" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig18.png" alt="Red Hat JBoss AMQ 7 main page with the Management Console link displayed first" width="640" height="265" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig18.png 955w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig18-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig18-768x318.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-737117" class="wp-caption-text"&gt;Figure 17: Click Management Console to go to AMQ Broker Management Console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you are in the Management Console, log in using &lt;code&gt;admin&lt;/code&gt; as your username and password, as shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_737127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig19.png"&gt;&lt;img aria-describedby="caption-attachment-737127" class="wp-image-737127" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig19.png" alt="A screenshot of the login page." width="640" height="365" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig19.png 815w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig19-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Fig19-768x438.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-737127" class="wp-caption-text"&gt;Figure 18: Log into the AMQ Broker Management Console with admin/admin.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;From the Management Console, click on &lt;b&gt;Artemis&lt;/b&gt; in the upper-left corner, then click &lt;b&gt;Queues&lt;/b&gt; in the top navigation bar. Notice the &lt;code&gt;test.foo&lt;/code&gt; address and queue that we created earlier, using the ActiveMQArtemisAddress custom resource. As shown in Figure 19, the message count should be 10.&lt;/p&gt; &lt;div id="attachment_768077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig19.png"&gt;&lt;img aria-describedby="caption-attachment-768077" class="wp-image-768077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig19-1024x293.png" alt="The Artemis AMQ Broker screen with Queues and 10 Message Count circled." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig19-1024x293.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig19-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Fig19-768x220.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-768077" class="wp-caption-text"&gt;Figure 19: There are now 10 messages in the test_foo queue.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Consume the messages&lt;/h3&gt; &lt;p&gt;Use the following command to consume the 10 messages (change the URL and location of the truststore as needed):&lt;/p&gt; &lt;pre&gt;$ ./bin/artemis consumer --url 'amqps://ex-aao-amqp-0-svc-rte-amq-broker-ssl.apps.ocp42.lab.example:443?jms.username=admin&amp;#38;jms.password=admin&amp;#38;transport.trustStoreLocation=/opt/playground/amq76-ocp-deploy/client.ts&amp;#38;transport.trustStorePassword=password&amp;#38;transport.verifyHost=false' --threads 1 --protocol amqp --message-count 10 --destination 'queue://test.foo' Consumer:: filter = null Consumer ActiveMQQueue[test.foo], thread=0 wait until 10 messages are consumed Consumer ActiveMQQueue[test.foo], thread=0 Consumed: 10 messages Consumer ActiveMQQueue[test.foo], thread=0 Elapsed time in second : 0 s Consumer ActiveMQQueue[test.foo], thread=0 Elapsed time in milli second : 42 milli seconds Consumer ActiveMQQueue[test.foo], thread=0 Consumed: 10 messages Consumer ActiveMQQueue[test.foo], thread=0 Consumer thread finished &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You&amp;#8217;ll need to change the URL and location of &lt;code&gt;client.ts&lt;/code&gt;. If you used a different password, change that too. Back in the broker management console, make sure that you are looking at the list of queues and click the &lt;b&gt;Reset&lt;/b&gt; button. The message count should be zero.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, we walked through how to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Configure One-Way TLS with AMQ Broker&lt;/li&gt; &lt;li&gt;Install AMQ Broker Operator on OpenShift&lt;/li&gt; &lt;li&gt;Create a broker instance and TLS secured AMQL acceptor and define an Anycast address&lt;/li&gt; &lt;li&gt;Use the Apache Artemis CLI as a client to establish a secure connection to the broker and produce and consume messages&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That&amp;#8217;s all. Hopefully, this article has been helpful.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#38;linkname=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F26%2Fconnecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift%2F&amp;#038;title=Connecting%20external%20clients%20to%20Red%20Hat%20AMQ%20Broker%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/08/26/connecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift/" data-a2a-title="Connecting external clients to Red Hat AMQ Broker on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/26/connecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift/"&gt;Connecting external clients to Red Hat AMQ Broker on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/n-KevXCaiUc" height="1" width="1" alt=""/&gt;</content><summary>Developers deploying Red Hat AMQ on Red Hat OpenShift often wonder how to connect external clients to AMQ Broker using the Transport Layer Security (TLS) protocol, which is an improved successor to the Secure Sockets Layer (SSL) protocol. In this article, you will learn how to do just that. The steps are as follows: Generate TLS credentials. Install the AMQ Broker Operator. Deploy an AMQ Broker in...</summary><dc:creator>Paul Vergilis</dc:creator><dc:date>2020-08-26T07:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/26/connecting-external-clients-to-red-hat-amq-broker-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Get started with JDK Flight Recorder in OpenJDK 8u</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_2yZ734MjFI/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java garbage collection" scheme="searchisko:content:tags" /><category term="java monitoring" scheme="searchisko:content:tags" /><category term="jcmd" scheme="searchisko:content:tags" /><category term="JDK Flight Recorder" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="OpenJDK 8" scheme="searchisko:content:tags" /><author><name>mtorre</name></author><id>searchisko:content:id:jbossorg_blog-get_started_with_jdk_flight_recorder_in_openjdk_8u</id><updated>2020-08-25T07:00:43Z</updated><published>2020-08-25T07:00:43Z</published><content type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;OpenJDK 8u 262 release&lt;/a&gt; includes several security-related patches and a new addition, JDK Flight Recorder (JFR). This article introduces OpenJDK developers to using JDK Flight Recorder with JDK Mission Control and related utilities. I will also briefly introduce you to Project Hamburg, also known as Container JFR.&lt;/p&gt; &lt;h2&gt;About JDK Flight Recorder&lt;/h2&gt; &lt;p&gt;JDK Flight Recorder is a troubleshooting, monitoring, and profiling framework that is deeply embedded within the Java Virtual Machine (JVM) code. It was first introduced in OpenJDK 11 as part of &lt;a target="_blank" rel="nofollow" href="http://openjdk.java.net/jeps/328"&gt;JEP 328&lt;/a&gt;. JDK Flight Recorder was available before OpenJDK 11 as a commercial feature only in JRockit, and then in the Oracle distribution of the Java Development Kit (JDK). Since JFR was released as a proper open source component in OpenJDK 11, a growing number of &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; community members have wanted to make the feature available in older releases.&lt;/p&gt; &lt;p&gt;In 2019, during &lt;a target="_blank" rel="nofollow" href="https://archive.fosdem.org/2019/schedule/event/imc/"&gt;FOSDEM&amp;#8217;s Java DevRoom&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://openjdk.java.net/workshop"&gt;the OpenJDK Committers Workshop&lt;/a&gt;, a group of OpenJDK committers decided to form a joint task force with the goal of backporting the necessary changes and fixes to OpenJDK 8u. A little over a year and many, many patches later, the project was finally merged with the main upstream OpenJDK 8u development tree.&lt;/p&gt; &lt;p&gt;The first public release was OpenJDK 8u 262; however, if you attempt to compile OpenJDK yourself, you will find that OpenJDK 8u 262 defaults to skipping JFR during compilation. OpenJDK 8u 272 (due in October) will be the first release to compile JFR by default.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Developers who consume OpenJDK through &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt; get a Red Hat Package Manager (RPM) file that contains support for JFR. We would certainly like to hear about your experiences, especially regarding bugs or issues that you find.&lt;/p&gt; &lt;h3&gt;JDK Flight Recorder under the hood&lt;/h3&gt; &lt;p&gt;JDK Flight Recorder consists of two main components: One is the critical part containing the data, and the other is the internal infrastructure to record and expose the data. This data is abstracted via a concept called &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;&lt;i&gt;events&lt;/i&gt;&lt;/a&gt;. Events can have many kinds of useful information associated with them and can represent samples in time, single-trigger events, or a given time duration. As a developer, you can add metadata as well as other contextual information to an event definition and use that information to describe the event for your analysis tools, and also make it self-descriptive for other humans to better understand the event type. For example, you might want to be notified when file access happens or when a garbage collection (GC) compaction phase begins, or to know how long a full garbage collection phase took. Such events might contain fields that can be annotated—for example, to represent a &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.jfr/jdk/jfr/Period.html"&gt;Period&lt;/a&gt; or a &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.jfr/jdk/jfr/Frequency.html"&gt;Frequency&lt;/a&gt;—which JFR&amp;#8217;s tooling lets you visualize in a particular way during analysis. OpenJDK 8u includes more than 160 events for you to record and analyze.&lt;/p&gt; &lt;p&gt;Although those events are recorded when they happen, JFR itself is not a real-time tool and does not stream events at the point of call. (There is a &lt;a target="_blank" rel="nofollow" href="https://openjdk.java.net/jeps/349"&gt;JFR Event Streaming API&lt;/a&gt; in later OpenJDKs, but its purpose is not to stream events in real-time.) Instead, the underlying framework stores events in thread-local buffers that are then written to a global ring buffer. When those buffers are filled, they are finally flushed to disk by a periodic thread, using a mechanism that resembles the mechanism used by transactional databases.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: While JFR&amp;#8217;s design might seem overly complicated, it allows for efficient use of both memory and CPU. Generally, JFR&amp;#8217;s overhead is extremely low—about 1%, and in most cases, even less. The low overhead means that JFR can be (and is) used at production time, unlike most other solutions where the runtime cost is more prohibitive.&lt;/p&gt; &lt;h3&gt;JFR recordings&lt;/h3&gt; &lt;p&gt;JFR&amp;#8217;s recording file is a binary representation of all of the events and their metadata. This information is divided into chunks. A &lt;em&gt;chunk&lt;/em&gt; is the smallest unit of self-contained information in a JFR recording that can be read separately and still completely describe the events contained within the chunk.&lt;/p&gt; &lt;p&gt;All of the information is encoded as LEB128 encoding integers, including strings that reference back to constant-pool positions. This encoding guarantees a high level of data compaction in each recording. You can also &lt;a target="_blank" rel="nofollow" href="http://hirt.se/blog/?p=1166"&gt;further compress&lt;/a&gt; recordings using methods like GZip, LZMA and XZ, or LZ4. Recordings are written to disk either on request or when the program terminates, based on configuration. You also can have endless recordings that are written to disk at intervals, letting you see the behavior of the application over time. In short, JFR&amp;#8217;s configuration options are flexible.&lt;/p&gt; &lt;h2&gt;How to use JDK Flight Recorder&lt;/h2&gt; &lt;p&gt;By default, a number of mechanisms are available to control JDK Flight Recorder in OpenJDK, which makes it extremely simple to adapt to the use case at hand. The first option is to start JFR directly with the JVM, for example:&lt;/p&gt; &lt;pre&gt;$ java -XX:StartFlightRecording your.application.ClassName&lt;/pre&gt; &lt;p&gt;You can use a comma-separated list of options to configure JFR further. As an example, you might want to dump the recording on exit:&lt;/p&gt; &lt;pre&gt;$ java -XX:StartFlightRecording=dumponexit=true your.application.ClassName&lt;/pre&gt; &lt;p&gt;You can use &lt;code&gt;jcmd&lt;/code&gt;, a utility you might already be familiar with, to control JFR after application startup:&lt;/p&gt; &lt;pre&gt;$ jcmd &amp;#60;pid&amp;#62; &amp;#60;pid&amp;#62;: The following commands are available: VM.unlock_commercial_features JFR.configure JFR.stop JFR.start JFR.dump JFR.check VM.native_memory ManagementAgent.stop ManagementAgent.start_local ManagementAgent.start VM.classloader_stats GC.rotate_log Thread.print GC.class_stats GC.class_histogram GC.heap_dump GC.finalizer_info GC.heap_info GC.run_finalization GC.run VM.uptime VM.dynlibs VM.flags VM.system_properties VM.command_line VM.version help For more information about a specific command use 'help &amp;#60;command&amp;#62;'. &lt;/pre&gt; &lt;p&gt;Intuitively, the &lt;code&gt;jcmd&lt;/code&gt; utility allows you to start and stop a recording, configure the recording settings, check the status of a recording, and dump a recording. It is possible to have multiple recordings running at the same time.&lt;/p&gt; &lt;p&gt;You can use the standard &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/en/java/javase/14/jfapi/flight-recorder-api-programmers-guide.pdf"&gt;Java Flight Recorder API&lt;/a&gt; to access a recording directly from your application code. Some things are essential to understand when using the API, so I will discuss this option further and show you an example at the end of the article.&lt;/p&gt; &lt;p&gt;The other, arguably more useful method of retrieving recordings is via &lt;a target="_blank" rel="nofollow" href="http://jdk.java.net/jmc/"&gt;JDK Mission Control&lt;/a&gt;, an application specially designed to control and analyze recordings.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You might have noticed the &lt;code&gt;unlock_commercial_features&lt;/code&gt; flag in the list of available &lt;code&gt;jcmd&lt;/code&gt; commands. It is important to be aware that JFR is &lt;i&gt;not&lt;/i&gt; a commercial feature in OpenJDK. It is, however, a commercial feature in any Oracle JDK before JDK 11. We&amp;#8217;ve kept the flag for compatibility reasons, but it does nothing, and you can safely ignore it.&lt;/p&gt; &lt;h2&gt;Using JDK Flight Recorder with JDK Mission Control&lt;/h2&gt; &lt;p&gt;OpenJDK contains a simple tool called &lt;code&gt;jfr&lt;/code&gt; that allows you to read JFR recordings and get useful metrics from them. However, you will see the real benefits of JFR recordings when you combine them with JDK Mission Control (JMC). JMC is already available in Fedora and &lt;a href="https://developers.redhat.com/products/rhel/"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7 via &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; (RHSCL), in RHEL 8 via the modules, and for Windows users from the &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;OpenJDK developer portal&lt;/a&gt;. You can also obtain JDK Mission Control via a downstream distribution like &lt;a target="_blank" rel="nofollow" href="https://adoptopenjdk.net/jmc"&gt;AdoptOpenJDK&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you have an older installation of JMC, you might see a warning dialog when trying to access an OpenJDK 8u version with JDK Flight Recorder, asking if you are using a commercial feature. As I previously noted, you can ignore this message on OpenJDK (and on OpenJDK &lt;i&gt;only&lt;/i&gt;). This bug has been fixed in later versions of JDK Mission Control. Figure 1 shows the commercial features warning.&lt;/p&gt; &lt;div id="attachment_759507" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-1.png"&gt;&lt;img aria-describedby="caption-attachment-759507" class="wp-image-759507" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-1.png" alt="A screenshot of the commercial features warning." width="640" height="370" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-1.png 720w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-1-300x173.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-759507" class="wp-caption-text"&gt;Figure 1: You can ignore the commercial features warning on any OpenJDK build.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Demo: Profiling GC allocation&lt;/h2&gt; &lt;p&gt;JDK Mission Control Project Lead Marcus Hirt has prepared a fine &lt;a target="_blank" rel="nofollow" href="https://github.com/thegreystone/jmc-tutorial"&gt;set of tutorials&lt;/a&gt; and demos to explore using JFR and JMC together. Rather than creating a new demo, I will reference his code in this section. In particular, I will use his example of GC allocation behavior, &lt;code&gt;04_JFR_GC&lt;/code&gt;, to showcase JMC&amp;#8217;s ability to automatically analyze data and suggest improvements. JMC&amp;#8217;s analysis is based on a feature called the &lt;i&gt;rules engine&lt;/i&gt;. The rules engine is currently being &lt;a target="_blank" rel="nofollow" href="https://wiki.openjdk.java.net/display/jmc/Rules+2.0"&gt;overhauled&lt;/a&gt; for JMC 8.0 in order to add more options for analysis, offer a better API for direct consumption via tooling, and improve overall performance.&lt;/p&gt; &lt;p&gt;The GC demo simply allocates a lot of data and stores it in a map. It then checks the contents of the map at every allocation cycle. Although a real-world program would do something more interesting with the data, the pattern represents a very typical use case with hash maps. In our case, the program seems to work fine, and we don&amp;#8217;t experience any out-of-memory errors or other types of errors. That makes the demo a perfect candidate for exploring hidden performance problems and checking for possible bottlenecks and optimizations.&lt;/p&gt; &lt;h3&gt;Using templates&lt;/h3&gt; &lt;p&gt;JMC and JFR have a handy feature called &lt;i&gt;templates&lt;/i&gt; that allows you to start a recording with default settings and events. Those templates correspond to configurations that you can pass via the command-line interface (CLI) when retrieving recordings via &lt;code&gt;jcmd&lt;/code&gt;, for example. However, the graphical user interface (GUI) makes it much easier to understand the settings. We will choose the &lt;b&gt;profiling&lt;/b&gt; template and the default one-minute recording session for this experiment. That provides enough data for this demo.&lt;/p&gt; &lt;p&gt;As shown in Figure 2, running the application and retrieving the recording gives us a direct answer to what we might want to optimize right away, without the need to research further. The application does a significant number of primitive-to-object conversions, and JMC tells you where those allocations occur.&lt;/p&gt; &lt;div id="attachment_759517" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2.png"&gt;&lt;img aria-describedby="caption-attachment-759517" class="wp-image-759517 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2-1024x581.png" alt="A screenshot of analysis from JDK Mission Control's Automated Analysis view." width="640" height="363" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2-1024x581.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2-300x170.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2-768x436.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-2.png 1052w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-759517" class="wp-caption-text"&gt;Figure 2: JDK Mission Control&amp;#8217;s Automated Analysis view detects many issues automatically.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This demo was created for a hands-on session at Java One some years ago, and the JMC version at that time did not have an option for advanced analysis. Students in the session were encouraged to explore the &lt;b&gt;Memory&lt;/b&gt; and the &lt;b&gt;TLAB&lt;/b&gt; tabs to get a more detailed indication of the memory pressure, which you can see in Figure 3.&lt;/p&gt; &lt;div id="attachment_759527" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3.png"&gt;&lt;img aria-describedby="caption-attachment-759527" class="wp-image-759527 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3-1024x567.png" alt="A screenshot of the memory allocation shown in the TLAB tab." width="640" height="354" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3-1024x567.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3-768x425.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-3.png 1343w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-759527" class="wp-caption-text"&gt;Figure 3: Memory allocations seen in the TLAB tab.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The Analysis page in JMC 7 and later versions offers considerably more information, and is always improving with more rules and optimization strategies. JMC also provides the Analysis page as a standalone component exported as an HTML page. You can easily integrate JMC analysis into applications without using the full IDE. When used together with the JFR API, JMC&amp;#8217;s standalone analysis component lets you integrate robust monitoring and profiling solutions into your infrastructure while keeping memory overhead extremely low.&lt;/p&gt; &lt;h3&gt;Memory profiling with JFR&amp;#8217;s Old Object Sample Event&lt;/h3&gt; &lt;p&gt;Traditionally, for effective memory profiling, you would need to access and explore full heap dumps over time to check the GC roots and the allocation history. Another equally expensive option would be using methods like agents that sample object allocation via the Java Native Interface (JNI). That is not always possible, however, especially given the sensitive information contained in a full heap dump. JFR can help here, too, thanks to its Old Object Sample Event, which was backported to OpenJDK 8u.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you are interested in knowing more about JFR&amp;#8217;s Old Object Sample Event, I once again point you to a &lt;a target="_blank" rel="nofollow" href="http://hirt.se/blog/?p=1055"&gt;blog post by Marcus Hirt&lt;/a&gt;. You should really check out his blog. It&amp;#8217;s an incredible source of information, tricks, and details about profiling, JMC, and JFR.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll use another small and self-contained example to explore JFR&amp;#8217;s Old Object Sample Event. It&amp;#8217;s a rather obvious example when you read the code, but nevertheless very good for exploring our options.&lt;/p&gt; &lt;pre&gt;public class Leaks {    private static final Map&amp;#60;Object, Object&amp;#62; &lt;i&gt;SESSION_DATA &lt;/i&gt;= new HashMap&amp;#60;&amp;#62;();    public static class UserInformation {       private byte[] data = new byte[10000];    }    public static void main(String[] args) {        String userId = "user";        while (true) {            UserInformation user = (UserInformation) &lt;i&gt;SESSION_DATA&lt;/i&gt;.get(userId);            if (user == null) {                user = &lt;i&gt;findUserInformation&lt;/i&gt;(userId);                &lt;i&gt;// SESSION_DATA.put(userId, user); // Correct&lt;/i&gt; &lt;i&gt;               &lt;/i&gt;&lt;i&gt;SESSION_DATA&lt;/i&gt;.put(user, user);      &lt;i&gt;// Wrong&lt;/i&gt; &lt;i&gt;           &lt;/i&gt;}            &lt;i&gt;sleep&lt;/i&gt;();        }    }    private static UserInformation findUserInformation(String userId) {        &lt;i&gt;sleep&lt;/i&gt;();        return new UserInformation();    }    private static void sleep() {        try {            Thread.&lt;i&gt;sleep&lt;/i&gt;(1);        } catch (InterruptedException e) {}    } } &lt;/pre&gt; &lt;p&gt;The mistake highlighted in the code is the sort of error quick testing catches before going to production, but for the sake of example, let&amp;#8217;s assume it&amp;#8217;s a bug in our code that found its way into production. Figure 4 shows a JFR session where we&amp;#8217;ve turned on Old Object Sample Event profiling. (No heap dump was harmed during this session.)&lt;/p&gt; &lt;div id="attachment_759537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-4.png"&gt;&lt;img aria-describedby="caption-attachment-759537" class="wp-image-759537" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-4.png" alt="A screenshot of an Old Object Sample Event shown in the Automated Analysis view" width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-4.png 858w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-4-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-4-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-759537" class="wp-caption-text"&gt;Figure 4: An Old Object Sample Event is shown in the Automated Analysis view.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The analysis instantly tells us where to look: A hash map has been filled over and over, and not only contains an increasing number of objects, but the memory allocation is also high. Even without reading the code, you would expect this map to be filling objects in a loop without much control. As shown in Figure 5, the &lt;b&gt;Memory&lt;/b&gt; tab reveals even more.&lt;/p&gt; &lt;div id="attachment_759547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-5.png"&gt;&lt;img aria-describedby="caption-attachment-759547" class="wp-image-759547 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-5-1024x521.png" alt="A screenshot of the Live Object page shown side-by-side with the application code." width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-5-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-5-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/openjdk-jfr-5-768x391.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-759547" class="wp-caption-text"&gt;Figure 5: The Live Object page is shown side-by-side with the application code. Note the matching line numbers.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In this tab, we see the program code alongside the &lt;b&gt;Live Object&lt;/b&gt; page. The stack trace with the line numbers points out exactly where the problem is.&lt;/p&gt; &lt;h3&gt;A note about profiling&lt;/h3&gt; &lt;p&gt;Being able to track object allocation and retention is one of the most critical tools when analyzing memory problems. I recall a bug that was challenging to fix because the number of created objects was huge, but only when running the application&amp;#8217;s UI via a remote X11 connection. In addition, objects were created every time the user moved the mouse or clicked a button, causing many methods to recalculate the position of the graphical interface, but only in some cases.&lt;/p&gt; &lt;p&gt;The two behaviors were linked because there was a bug in how we handled the remote connection: Calculating their position required knowing the relative position of objects on the screen. Because it was a remote connection, numerous X11 atoms were created and passed back and forth over the wire. If the user had multiple applications running, this would mean even more traffic. The Java code would end up intercepting those atoms, creating a Java representation, doing more calculations, and repeat.&lt;/p&gt; &lt;p&gt;At the time, we didn&amp;#8217;t have access to JMC, but to a similar tool called &lt;a target="_blank" rel="nofollow" href="http://icedtea.classpath.org/thermostat/"&gt;Thermostat&lt;/a&gt;. We used our integration with &lt;a target="_blank" rel="nofollow" href="https://byteman.jboss.org/"&gt;Byteman&lt;/a&gt; to create a script to analyze where those objects were created and why the code path that led to the creation of those objects was exercised differently. That is hard to do with regular method profilers because they tend to aggregate the results. Having this information handy directly from a JFR recording is incredibly important and would have saved us time. More so, when considering that a customer can simply send you the recording from their deployment rather than having you try to reproduce errors locally, install more tooling, open ports, start agents, and so on. In this case, the recording is all that is needed.&lt;/p&gt; &lt;h2&gt;The JDK Flight Recorder API&lt;/h2&gt; &lt;p&gt;Earlier, I mentioned that JFR comes with an internal API. The API resides under the &lt;code&gt;jdk.jfr&lt;/code&gt; namespace and contains classes that allow you to manage recordings and create custom events for your application.&lt;/p&gt; &lt;p&gt;The most straightforward program that you can write is for checking whether JFR is available:&lt;/p&gt; &lt;pre&gt;public class CheckJFR {    public static void main(String[] args) {        boolean isAvailable = FlightRecorder.&lt;i&gt;isAvailable&lt;/i&gt;();        System.&lt;i&gt;err&lt;/i&gt;.println(isAvailable);    } } &lt;/pre&gt; &lt;p&gt;You can then use the API to start and stop the recording programmatically from your application. For example, the following class is an abstraction to create a JFR manager:&lt;/p&gt; &lt;pre&gt;import java.io.File; import java.nio.file.Path; import java.util.HashMap; import java.util.Map; import jdk.jfr.Configuration; import jdk.jfr.Recording; public class LocalJFR {    private Map&amp;#60;Long, Recording&amp;#62; recordings = new HashMap&amp;#60;&amp;#62;();    @Override    public long startRecording(String configName) throws Exception {        Configuration c = Configuration.&lt;i&gt;getConfiguration&lt;/i&gt;(configName);        return startRecording(new Recording(c), "jfr-recording");    }    @Override    public long startRecording(String configName, String recordingName)        throws Exception    {        Configuration c = Configuration.&lt;i&gt;getConfiguration&lt;/i&gt;(configName);        return startRecording(new Recording(c), recordingName);    }    @Override    public long startRecording() throws Exception {        return startRecording(new Recording(), "jfr-reopenjdk-jfr-2cording");    }   public long startRecording(Recording recording, String name) throws Exception {       long id = recording.getId();          Path destination = File.&lt;i&gt;createTempFile&lt;/i&gt;(name + "-" + id,                                               ".jfr").toPath();        recording.setDestination(destination);        recordings.put(id, recording);        recording.start();        return id;    }    public File endRecording(long id) throws Exception {        Recording recording = recordings.remove(id);        recording.stop();        recording.close();        return recording.getDestination().toFile();    } } &lt;/pre&gt; &lt;p&gt;While this is the simplest event that you can define:&lt;/p&gt; &lt;pre&gt;@Label("Basic Event") @Description("An event with just a message as payload") public class BasicEvent extends Event {    @Label("Message")    public String message; }&lt;/pre&gt; &lt;h3&gt;Creating and monitoring JFR events programmatically&lt;/h3&gt; &lt;p&gt;Eric Gahlin, one of the authors of JFR in OpenJDK, put together a comprehensive list of demos and smaller tests using the &lt;a target="_blank" rel="nofollow" href="https://github.com/flight-recorder/samples"&gt;JFR API&lt;/a&gt;. The API is part of the Java specification starting from OpenJDK 11 but is not part of the specification in OpenJDK 8, so not all OpenJDK implementations will have access to it.&lt;/p&gt; &lt;p&gt;To facilitate porting and migration between versions, we created a simple &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/openjdk8-jfr-compat"&gt;compat-jfr&lt;/a&gt; with an empty implementation. This package allows users to instrument their code, create custom events, and use the API to manage recordings. The implementation is empty, however, so the methods don&amp;#8217;t do anything, events are not committed to memory or to disk, and when queried, JFR reports as not available and cannot be started. The application will function, compile, and run correctly, and is great for compatibility. You can use the compact-jfr either as a dependency on the command line or by adding it to your JDK&amp;#8217;s &lt;code&gt;jre/lib/ext&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;In addition to creating custom events via the Event API, you can also instrument your code after the fact to add events to a running application. JMC also has a convenient tool for this, with the brilliant name of &lt;a target="_blank" rel="nofollow" href="https://wiki.openjdk.java.net/display/jmc/The+JMC+Agent"&gt;Agent&lt;/a&gt;. The JMC Agent uses a set of configurations to define events and then instruments the running code with them. Once the session is over, the instrumentation is removed. If you are familiar with Byteman (and you should be), Agent is very similar, but instead of a full Turing complete language at your disposal, Agent focuses on JFR events alone. The reduction in scope allows us to focus specifically on the problem of instrumenting JFR with more fine-tuned tools, which also partially solves issues like security and permissions. We are also working on a JMC plugin to control and configure Agent, it&amp;#8217;s a work in progress but is already useful and &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/jmc-agent-plugin"&gt;you can find it here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Using JFR with containers (Project Hamburg)&lt;/h2&gt; &lt;p&gt;All of the tools described in this article are fantastic because they let you fine-tune JDK Flight Recorder for your specific deployment. However, we realized there is still a significant amount of work required from developers using JFR within &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;. First and foremost, the receiving end of JFR needs to have an open connection via the Java Management Extensions (JMX). This connection can (and should) be secured, of course, but a container platform like &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (OCP) could disallow or make it difficult to leave internal ports open to the external world. It is also complicated to track multiple processes at once without the use of higher-level tooling. OpenShift has the deployments console to help you with this task, but a more general solution is still needed.&lt;/p&gt; &lt;p&gt;For this reason, we created a project called &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/container-jfr"&gt;Container JFR&lt;/a&gt;, also known as Project Hamburg. Container JFR is a simple three-tier application that contains a controller agent that connects via JMX within the container to the various applications and exposes a web services interface to the external world. The JMX connection can be hidden within the container—even in a non-container world, i.e. can be behind a firewall—while the web services interface is secured via authentication. The interface allows you to control multiple JVMs from the same endpoint, so it&amp;#8217;s great with multiple deployments.&lt;/p&gt; &lt;p&gt;The other component is a web UI that uses web services. It adds simplicity to the management, but above all integrates the automated analysis feature from JMC, so that you can see the &lt;a href="https://developers.redhat.com/blog/category/performance/"&gt;application performance&lt;/a&gt; right away and only decide to download the recording if the analysis points to certain issues. The project also contains a &lt;a href="https://developers.redhat.com/blog/2020/07/10/generate-automated-grafana-metrics-dashboards-for-microprofile-apps/"&gt;Grafana&lt;/a&gt; data source that lets us create graphs within the browser (so that users can integrate recordings in their dashboards, for example); an experimental &lt;a target="_blank" rel="nofollow" href="https://prometheus.io"&gt;Prometheus&lt;/a&gt; exporter (which isn&amp;#8217;t the best way to consume the recordings but nevertheless can be useful); and last but not least, a comprehensive set of Operator APIs for OpenShift or Kubernetes. Using these Operator APIs allows you to install, run, and configure the project with a simple mouse click.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Gunnar Morling has written a comprehensive blog post about &lt;a target="_blank" rel="nofollow" href="https://github.com/gunnarmorling/jfr-custom-events"&gt;using custom, application-specific JFR events to monitor a REST API&lt;/a&gt;. The post illustrates the streaming API and custom JFR events, so I&amp;#8217;ll point you there for further details. Gunnar is the best!&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;JDK Flight Recorder is the first monitoring and profiling tool available for OpenJDK that can expose such a high level of information without adding a tax on the runtime system. JFR offers that level of information because it is deeply integrated within the JVM. Being able to create custom events using either the Event API or the Agent tool lets you take advantage of JFR from an application perspective, too, and not just from the runtime.&lt;/p&gt; &lt;p&gt;OpenJDK was a massive contribution of code to the public, and JDK Flight Recorder is arguably the most significant contribution since OpenJDK was open sourced. When Oracle open sourced JDK Flight Recorder and JDK Mission Control, they did an incredible service to the Java community, which should be acknowledged. The backport to OpenJDK 8u is finally bringing this infrastructure to all of the actively maintained versions of the OpenJDK.&lt;/p&gt; &lt;p&gt;Although we hope that you have migrated to a later version of OpenJDK to benefit from all of the additional features and performance improvements, the addition of JFR in your toolbox will help your applications perform better, faster, and more trouble-free on any version of OpenJDK.&lt;/p&gt; &lt;h2&gt;Acknowledgments&lt;/h2&gt; &lt;p&gt;I would like to thank:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Marcus Hirt for his work as a project lead for the JDK Mission Control project. He truly sets the standard high when it comes to community engagement, and his blog is an incredible source of inspiration and knowledge.&lt;/li&gt; &lt;li&gt;Gunnar Morling for helping out and testing Container JFR early in its development and for his feedback and suggestions.&lt;/li&gt; &lt;li&gt;Red Hat&amp;#8217;s JDK Mission Control team for their amazing contributions to JMC, and for their work on Agent, the JFR Compact, and Container JFR.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Finally, a huge thank you to the original JDK Flight Recorder team for this fantastic technology, and to Oracle for open sourcing it. Speaking of amazing, did you know that JMC &lt;a target="_blank" rel="nofollow" href="http://hirt.se/blog/?p=1230"&gt;won the best Java Feature&lt;/a&gt; contest in 2020?&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Here are the resources mentioned in this article, as well as interesting additional links to presentations, articles, and source code that you can use to learn more about JDK Flight Recorder and JDK Mission Control:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://archive.fosdem.org/2019/schedule/event/imc/"&gt;An introduction to middleware application monitoring with Java Mission Control and Flight Recorder&lt;/a&gt; (FOSDEM presentation, 2019)&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://fosdem.org/2020/schedule/event/imc/"&gt;JMC &amp;#38; JFR—2020 vision&lt;/a&gt; (FOSDEM presentation, 2020)&lt;/li&gt; &lt;li&gt;More about the &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/openjdk8-jfr-compat"&gt;JFR compatibility API for OpenJDK 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="http://hirt.se/blog/?p=364"&gt;Low overhead method profiling with Java Mission Control&lt;/a&gt; (Marcus Hirt, 2013)&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="http://hirt.se/blog/?p=1166"&gt;Compressing flight recordings&lt;/a&gt; (Marcus Hirt, 2019)&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://dzone.com/articles/using-java-flight-recorder-with-openjdk-11-1"&gt;Using Java Flight Recorder with OpenJDK 11&lt;/a&gt; (Laszlo Csontos, 2018)&lt;/li&gt; &lt;li&gt;More about the &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/container-jfr"&gt;Container JFR project&lt;/a&gt;&lt;/li&gt; &lt;li&gt;More about &lt;a target="_blank" rel="nofollow" href="https://github.com/openjdk/jmc"&gt;JDK Mission Control&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Source code and examples for understanding how to create and use &lt;a target="_blank" rel="nofollow" href="https://github.com/gunnarmorling/jfr-custom-events"&gt;custom events with JDK Flight Recorder&lt;/a&gt; (Gunnar Morling, 2020)&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/flight-recorder/samples"&gt;Flight Recorder samples&lt;/a&gt;: Code snippets illustrating how to use the JDK Flight Recorder API&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/thegreystone/jmc-jshell"&gt;jmc-jshell&lt;/a&gt;: An easier way to experiment with the JDK Flight Recorder and the JMC core classes&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.morling.dev/blog/introducing-jmfrx-a-bridge-from-jmx-to-jdk-flight-recorder/"&gt;Introduction to JmFrX: a small utility to capture JMX data with JDK Flight Recorder&lt;/a&gt; (Gunnar Morling, 2020)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#38;linkname=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F25%2Fget-started-with-jdk-flight-recorder-in-openjdk-8u%2F&amp;#038;title=Get%20started%20with%20JDK%20Flight%20Recorder%20in%20OpenJDK%208u" data-a2a-url="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/" data-a2a-title="Get started with JDK Flight Recorder in OpenJDK 8u"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/"&gt;Get started with JDK Flight Recorder in OpenJDK 8u&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_2yZ734MjFI" height="1" width="1" alt=""/&gt;</content><summary>The OpenJDK 8u 262 release includes several security-related patches and a new addition, JDK Flight Recorder (JFR). This article introduces OpenJDK developers to using JDK Flight Recorder with JDK Mission Control and related utilities. I will also briefly introduce you to Project Hamburg, also known as Container JFR. About JDK Flight Recorder JDK Flight Recorder is a troubleshooting, monitoring, a...</summary><dc:creator>mtorre</dc:creator><dc:date>2020-08-25T07:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/</feedburner:origLink></entry><entry><title>How to Install Red Hat Process Automation Manager 7.8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/U9gwsOh3Uqs/how-to-install-rhpam-78.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_red_hat_process_automation_manager_7_8</id><updated>2020-08-25T05:00:06Z</updated><published>2020-08-25T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;div style="margin: 0px;"&gt;&lt;a href="https://1.bp.blogspot.com/-XtYIWE6HERs/XhNb1fqEqwI/AAAAAAAAw2A/SymJTAO25ts4tEjkEWGMA4dJl09Vi3HQwCNcBGAsYHQ/s1600/rhpam-login.png" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-blogger-escaped-data-original-height="927" data-blogger-escaped-data-original-width="1600" height="185" src="https://1.bp.blogspot.com/-XtYIWE6HERs/XhNb1fqEqwI/AAAAAAAAw2A/SymJTAO25ts4tEjkEWGMA4dJl09Vi3HQwCNcBGAsYHQ/s320/rhpam-login.png" title="" width="320" /&gt;&lt;/a&gt;Time for another update on installing the Red Hat Process Automation Manager with my easy install project.&amp;nbsp;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Installing the latest process automation tooling for your development projects in just minutes on your very own machine has never been easier.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;It's done in just three easy steps, so let's take a closer look and see if I'm pulling your leg or telling the truth about how easy this installation can be.&lt;/div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Just three easy steps to a fully installed and configured Red Hat Process Automation manager.&lt;/div&gt;&lt;h2 data-blogger-escaped-data-sourcepos="6:1-8:122" dir="auto"&gt;Install on your machine&lt;/h2&gt;&lt;div style="margin: 0px;"&gt;&lt;a href="https://1.bp.blogspot.com/-2AAONrobo6Y/XhNbzlLbFYI/AAAAAAAAw18/UBkTqMie9dY-dEyUGSzMQLkFvFfRW_EZACNcBGAsYHQ/s1600/rhpam-business-central.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-blogger-escaped-data-original-height="935" data-blogger-escaped-data-original-width="1600" height="186" src="https://1.bp.blogspot.com/-2AAONrobo6Y/XhNbzlLbFYI/AAAAAAAAw18/UBkTqMie9dY-dEyUGSzMQLkFvFfRW_EZACNcBGAsYHQ/s320/rhpam-business-central.png" style="cursor: move;" title="" width="320" /&gt;&lt;/a&gt;There are a few component you'll need to download for free from the provided developers site, then obtain the project linked below, add the&amp;nbsp; downloads, and run the installation script.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Watch the installation unfold before your eyes, with configuration, settings, and user creation all detailed in the script output so you can learn from the installation.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="margin: 0px;"&gt;Give it a try with these three steps:&lt;/div&gt;&lt;ol data-blogger-escaped-data-sourcepos="8:1-17:0" data-blogger-escaped-style="text-align: left;"&gt;&lt;li data-blogger-escaped-data-sourcepos="8:1-9:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="8:4-8:122"&gt;&lt;div style="margin: 0px;"&gt;&lt;a href="https://gitlab.com/bpmworkshop/rhpam-install-demo/-/archive/master/rhpam-install-demo-master.zip"&gt;Download and unzip.&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-blogger-escaped-data-sourcepos="8:4-8:122"&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-blogger-escaped-data-sourcepos="10:1-11:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="10:4-10:81"&gt;&lt;div style="margin: 0px;"&gt;Add products to installs directory, see installs/README for details and links.&lt;/div&gt;&lt;/div&gt;&lt;div data-blogger-escaped-data-sourcepos="10:4-10:81"&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-blogger-escaped-data-sourcepos="14:1-15:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="12:4-12:92"&gt;&lt;div style="margin: 0px;"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges.&lt;/div&gt;&lt;/div&gt;&lt;div data-blogger-escaped-data-sourcepos="12:4-12:92"&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&amp;nbsp;Login to&amp;nbsp;&lt;a data-blogger-escaped-target="_blank" href="http://localhost:8080/business-central" rel="nofollow noreferrer noopener"&gt;http://localhost:8080/business-central&lt;/a&gt;&amp;nbsp;(u:erics / p:redhatpam1!)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;That's it, not it's time to enjoy your installed and configured Red Hat Process Automation Manager.&lt;/div&gt;&lt;div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Not sure how to get started with process automation? Try the&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/index.html" rel="noreferrer noopener" target="_blank"&gt;online workshop&lt;/a&gt;&amp;nbsp;to get started building a first process automation project from scratch.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iOAi6EGneO4:qLtnr1PttEY:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iOAi6EGneO4:qLtnr1PttEY:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iOAi6EGneO4:qLtnr1PttEY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iOAi6EGneO4:qLtnr1PttEY:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iOAi6EGneO4:qLtnr1PttEY:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/iOAi6EGneO4" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/U9gwsOh3Uqs" height="1" width="1" alt=""/&gt;</content><summary>Time for another update on installing the Red Hat Process Automation Manager with my easy install project.  Installing the latest process automation tooling for your development projects in just minutes on your very own machine has never been easier. It's done in just three easy steps, so let's take a closer look and see if I'm pulling your leg or telling the truth about how easy this installation...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-08-25T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/iOAi6EGneO4/how-to-install-rhpam-78.html</feedburner:origLink></entry><entry><title>Java development on top of Kubernetes using Eclipse JKube</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Qg4WbCbuRw0/" /><category term="apache maven" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="docker image" scheme="searchisko:content:tags" /><category term="Eclipse" scheme="searchisko:content:tags" /><category term="fabric8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Jkube" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes manifest" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><author><name>Rohan Kumar</name></author><id>searchisko:content:id:jbossorg_blog-java_development_on_top_of_kubernetes_using_eclipse_jkube</id><updated>2020-08-24T07:00:56Z</updated><published>2020-08-24T07:00:56Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube"&gt;&lt;img class=" size-full wp-image-739047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-23-12-19-21.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-23-12-19-21.png" alt="Eclipse JKube: Deploy maven applications to Kubernetes." width="316" height="101" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-23-12-19-21.png 316w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-23-12-19-21-300x96.png 300w" sizes="(max-width: 316px) 100vw, 316px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It has been 25 years since developers started adopting Java technology and making it part of their core application stack. Today, many Java developers and Java-based shops are migrating or looking to migrate their infrastructure to &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;, or to related distributions like &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://aws.amazon.com/eks/"&gt;Amazon EKS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; has a steep learning curve, however, and it adds an additional layer of operations to the familiar Java development workflow. In this article, I introduce &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube"&gt;Eclipse JKube&lt;/a&gt; and show you how to use it to simplify the Kubernetes workflow. As you&amp;#8217;ll see, Eclipse JKube provides a migration path to Kubernetes while letting you stay within the familiar Java ecosystem. I will also quickly show you how to deploy a Java application to OpenShift using OpenShift Maven plugin.&lt;/p&gt; &lt;h2&gt;The traditional Java development workflow&lt;/h2&gt; &lt;p&gt;In a traditional &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; workflow, shown in Figure 1, a Java developer writes code, creates deployment units in the form of JAR or WAR files, and deploys and runs these files in a web server or application server. Developers mostly use Maven from the command line or use an IDE such as IntelliJ or Eclipse to code and package their applications. Developers are accustomed to making changes to their code and trying things out before committing and pushing the code to a version control system.&lt;/p&gt; &lt;div id="attachment_738447" style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png"&gt;&lt;img aria-describedby="caption-attachment-738447" class=" size-full wp-image-738447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png" alt="A diagram of the traditional Java development workflow." width="573" height="355" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png 573w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1-300x186.png 300w" sizes="(max-width: 573px) 100vw, 573px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-738447" class="wp-caption-text"&gt;Figure 1: The traditional Java development workflow.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;The cloud-native Java development workflow&lt;/h2&gt; &lt;p&gt;When we start writing cloud-native applications, Kubernetes and &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; come into the picture. As developers, we are expected to package our Java applications into &lt;a href="https://developers.redhat.com/blog/2020/06/08/commit-to-excellence-java-in-containers/"&gt;images&lt;/a&gt; and write Kubernetes manifests referencing those images. The manifests are then applied to the production server, which is running Kubernetes. Kubernetes pulls the images from the image registry and deploys applications based on the configuration we&amp;#8217;ve provided in our manifests, which are typically YAML files.&lt;/p&gt; &lt;p&gt;Figure 2 shows how the traditional Java development workflow changes in a cloud-native environment.&lt;/p&gt; &lt;div id="attachment_738457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png"&gt;&lt;img aria-describedby="caption-attachment-738457" class=" size-full wp-image-738457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png" alt="A diagram of the cloud-native Java development workflow." width="640" height="461" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png 813w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-300x216.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-768x553.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-738457" class="wp-caption-text"&gt;Figure 2: A cloud-native Java development workflow.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Eclipse JKube&lt;/h2&gt; &lt;p&gt;Adopting Kubernetes adds a new operations layer to the overall workflow, and that is troublesome for many developers. We want to focus on the application&amp;#8217;s logic, not how the application is deployed. Here is the point where &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube"&gt;Eclipse JKube&lt;/a&gt; enters the picture. As a developer, you can use JKube&amp;#8217;s libraries and plugins—&lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube/tree/master/jkube-kit"&gt;JKube Kit&lt;/a&gt; along with the &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube/tree/master/kubernetes-maven-plugin"&gt;Kubernetes Maven Plugin&lt;/a&gt; or the &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube/tree/master/openshift-maven-plugin"&gt;OpenShift Maven Plugin&lt;/a&gt;—to easily handle the Kubernetes and container operations outlined in Figure 2.&lt;/p&gt; &lt;p&gt;In the rest of this article, you will learn how to use Eclipse JKube with the Kubernetes Maven Plugin to simplify the Java development workflow on top of Kubernetes.&lt;/p&gt; &lt;h3&gt;Eclipse JKube in the cloud-native development workflow&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s consider a modified version of the cloud-native Java development workflow from Figure 2. Figure 3 shows that workflow after we&amp;#8217;ve integrated Eclipse JKube and the Kubernetes Maven Plugin.&lt;/p&gt; &lt;div id="attachment_738497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png"&gt;&lt;img aria-describedby="caption-attachment-738497" class=" size-full wp-image-738497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png" alt="A diagram of the cloud-native Java workflow simplified with Eclipse JKube." width="640" height="461" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png 813w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube-300x216.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube-768x553.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-738497" class="wp-caption-text"&gt;Figure 3: The cloud-native Java workflow simplified with Eclipse JKube.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In this workflow, all of the operations that require engaging with Kubernetes or a container (highlighted in red) are replaced by the default Eclipse JKube goals. Table 1 offers a closer look at these goals.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;table align="center"&gt; &lt;caption&gt;Table 1: Default Eclipse JKube goals.&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Phase&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:build"&gt;k8s:build&lt;/a&gt;&lt;/td&gt; &lt;td&gt;PRE_INTEGRATION_TEST&lt;/td&gt; &lt;td&gt;Build docker images.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:push"&gt;k8s:push&lt;/a&gt;&lt;/td&gt; &lt;td&gt;INSTALL&lt;/td&gt; &lt;td&gt;Push docker images to the registry.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:resource"&gt;k8s:resource&lt;/a&gt;&lt;/td&gt; &lt;td&gt;PROCESS_RESOURCES&lt;/td&gt; &lt;td&gt;Generate K8s manifests.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:apply"&gt;k8s:apply&lt;/a&gt;&lt;/td&gt; &lt;td&gt;COMPILE&lt;/td&gt; &lt;td&gt;Apply the generated manifests to K8s.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:undeploy"&gt;k8s:undeploy&lt;/a&gt;&lt;/td&gt; &lt;td&gt;UNDEPLOY&lt;/td&gt; &lt;td&gt;Delete K8s resources that were deployed via &lt;code&gt;k8s:apply&lt;/code&gt; and &lt;code&gt;k8s:deploy&lt;/code&gt;.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you don&amp;#8217;t want the opinionated defaults for your goals, then you can manually configure Eclipse JKube, which provides both &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#_xml_configuration"&gt;XML configuration&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#_resource_fragments"&gt;resource configuration&lt;/a&gt; options.&lt;/p&gt; &lt;p&gt;Now we&amp;#8217;re ready to explore an application example with Eclipse JKube and the Kubernetes Maven Plugin.&lt;/p&gt; &lt;h2&gt;Deploying a Java application onto Kubernetes with Eclipse JKube&lt;/h2&gt; &lt;p&gt;In this example, we will deploy a simple Java application onto a &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/setup/learning-environment/minikube/"&gt;Minikube&lt;/a&gt; cluster using Eclipse JKube. Using the Kubernetes Maven Plugin, we can set up the deployment without providing any configuration.&lt;/p&gt; &lt;p&gt;For our example application, we&amp;#8217;ll use a &lt;a target="_blank" rel="nofollow" href="https://github.com/rohanKanojia/eclipse-jkube-demo-project"&gt;simple random number generation application&lt;/a&gt;. This application prints JSON output on a &lt;code&gt;/random&lt;/code&gt; endpoint, like this:&lt;/p&gt; &lt;pre&gt;~/work/repos/eclipse-jkube-demo-project : $ curl localhost:8080/random | jq . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 45 0 45 0 0 818 0 --:--:-- --:--:-- --:--:-- 818 { "id": "e80a4d10-c79b-4b9a-aaac-7c286cb37f3c" } &lt;/pre&gt; &lt;h3&gt;Step 1: Get the Kubernetes Maven Plugin&lt;/h3&gt; &lt;p&gt;The Kubernetes Maven Plugin is available from the &lt;a target="_blank" rel="nofollow" href="https://search.maven.org/search?q=g:org.eclipse.jkube%20AND%20a:kubernetes-maven-plugin"&gt;Maven Central Repository&lt;/a&gt;. To start using Eclipse JKube, you need to add the Kubernetes Maven Plugin as a dependency in your &lt;code&gt;pom.xml&lt;/code&gt;, as shown here:&lt;/p&gt; &lt;pre&gt;&amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.eclipse.jkube&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;kubernetes-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${jkube.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &lt;/pre&gt; &lt;p&gt;If you are running the OpenShift version of Kubernetes, you will update your &lt;code&gt;pom.xml&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.eclipse.jkube&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openshift-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${jkube.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &lt;/pre&gt; &lt;h3&gt;Step 2: Build the docker image&lt;/h3&gt; &lt;p&gt;You can build your application JAR using the &lt;code&gt;mvn package&lt;/code&gt; command, then you can use the &lt;code&gt;mvn k8s:build&lt;/code&gt; goal to build a docker image of your application. Note that I am overriding the default image name via this property:&lt;/p&gt; &lt;pre&gt;&amp;#60;jkube.generator.name&amp;#62;docker.io/rohankanojia/random-generator:${project.version}&amp;#60;/jkube.generator.name&amp;#62; &lt;/pre&gt; &lt;p&gt;Before building an image, you need to make sure that you have exposed your docker daemon correctly. The command to expose the docker daemon is:&lt;/p&gt; &lt;pre&gt;$ eval $(minikube docker-env) &lt;/pre&gt; &lt;p&gt;Next, you enter the goal, &lt;code&gt;mvn k8s:build&lt;/code&gt;. Here is the output for building the docker image with the Eclipse JKube build goal:&lt;br /&gt; &lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:build&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:build (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Running in Kubernetes mode&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Building Docker image in Kubernetes mode&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: [docker.io/rohankanojia/random-generator:0.0.1] "spring-boot": Created docker-build.tar in 251 milliseconds&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: [docker.io/rohankanojia/random-generator:0.0.1] "spring-boot": Built image sha256:a20e5&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 5.053 s&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T11:28:23+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3&gt;Step 3: Push the image to your docker registry&lt;/h3&gt; &lt;p&gt;Once you&amp;#8217;ve built your docker image with your push registry configured (&lt;code&gt;docker.io&lt;/code&gt;, in my case), you can push the image to the registry. Here is the output after entering the Eclipse JKube push goal, &lt;code&gt;mvn k8s:push&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:push&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:push (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Running in Kubernetes mode&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Building Docker image in Kubernetes mode&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: The push refers to repository [docker.io/rohankanojia/random-generator]&lt;/span&gt; &lt;span style="color: #888888;"&gt;5dcd9556710f: Layer already exists &lt;/span&gt; &lt;span style="color: #888888;"&gt;b7139ad07aa8: Layer already exists &lt;/span&gt; &lt;span style="color: #888888;"&gt;b6f081e4b2b6: Layer already exists &lt;/span&gt; &lt;span style="color: #888888;"&gt;d8e1f35641ac: Layer already exists &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: 0.0.1: digest: sha256:9f9eda2a13b8cab1d2c9e474248500145fc09e2922fe3735692f9bda4c76002d size: 1162&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Pushed docker.io/rohankanojia/random-generator:0.0.1 in 7 seconds &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 11.222 s&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T11:35:37+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ &lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;After pushing the image, you can confirm that it was pushed to the specified image registry. In my case, I was able to see my pushed image on Docker Hub, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_738537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53.png"&gt;&lt;img aria-describedby="caption-attachment-738537" class=" size-full wp-image-738537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-1024x577.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-1024x577.png" alt="A screenshot of the pushed image on Docker Hub." width="640" height="361" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-1024x577.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-768x433.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53.png 1344w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-738537" class="wp-caption-text"&gt;Figure 4: The pushed image is available on Docker Hub.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 4: Generate the Kubernetes resource manifests for your application&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve built the application image, the next thing to do is to write the Kubernetes manifests. Eclipse JKube provides a goal for generating opinionated resource manifests based on the underlying Java framework, which could be &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, Vert.x, or some other framework. Another option is to configure the manifest using an XML configuration file and provide raw fragments (a portion of the desired resource manifest) in the application&amp;#8217;s &lt;code&gt;src/main/jkube&lt;/code&gt; folder. Your configuration would then be merged into the generated manifests.&lt;/p&gt; &lt;p&gt;For this application, we will let Eclipse JKube generate a manifest for a default deployment and a service of type &lt;code&gt;ClusterIP&lt;/code&gt;. Next, we&amp;#8217;ll customize the service manifest for a &lt;code&gt;Service&lt;/code&gt; of type &lt;code&gt;NodePort&lt;/code&gt;. Setting the following property overrides the default behavior:&lt;/p&gt; &lt;pre&gt;&amp;#60;jkube.enricher.jkube-service.type&amp;#62;NodePort&amp;#60;/jkube.enricher.jkube-service.type&amp;#62; &lt;/pre&gt; &lt;p&gt;Here is the output from entering the Eclipse JKube resource goal, &lt;code&gt;mvn k8s:resource&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:resource&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:resource (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: jkube-controller: Adding a default Deployment&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: jkube-service: Adding a default service 'random-generator' with ports [8080]&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: jkube-healthcheck-spring-boot: Adding readiness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 10 seconds&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: jkube-healthcheck-spring-boot: Adding liveness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 180 seconds&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: jkube-revision-history: Adding revision history limit to 2&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 3.344 s&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T11:38:11+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ ls target/classes/META-INF/jkube/kubernetes&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-deployment.yml random-generator-service.yml&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ cat target/classes/META-INF/jkube/kubernetes/random-generator-deployment.yml | head -n10&lt;/span&gt; &lt;span style="color: #888888;"&gt;---&lt;/span&gt; &lt;span style="color: #888888;"&gt;apiVersion: apps/v1&lt;/span&gt; &lt;span style="color: #888888;"&gt;kind: Deployment&lt;/span&gt; &lt;span style="color: #888888;"&gt;metadata:&lt;/span&gt; &lt;span style="color: #888888;"&gt; annotations:&lt;/span&gt; &lt;span style="color: #888888;"&gt; jkube.io/git-url: git@github.com:rohanKanojia/eclipse-jkube-demo-project.git&lt;/span&gt; &lt;span style="color: #888888;"&gt; jkube.io/git-commit: 1ef9ef2ef7a6fcbf8eb64c293f26f9c42d026512&lt;/span&gt; &lt;span style="color: #888888;"&gt; jkube.io/git-branch: master&lt;/span&gt; &lt;span style="color: #888888;"&gt; jkube.io/scm-url: https://github.com/spring-projects/spring-boot/spring-boot-starter-parent/random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt; jkube.io/scm-tag: HEAD&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3&gt;Step 5: Deploy your application in a Kubernetes cluster&lt;/h3&gt; &lt;p&gt;Everything is now set up for the example application. We were able to generate the image for the application, and then automatically generate the resource manifests. Now, we only need to apply these artifacts onto a Kubernetes cluster. You could use &lt;code&gt;kubectl apply -f&lt;/code&gt; to deploy the application; however, the plugin also takes care of this for you. Here is the output after entering the Eclipse JKube apply goal, &lt;code&gt;mvn k8s:apply&lt;/code&gt;:&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:apply&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:apply (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Using Kubernetes at https://192.168.39.145:8443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/kubernetes.yml &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Using namespace: default&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Creating a Service from kubernetes.yml namespace default name random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Created Service: target/jkube/applyJson/default/service-random-generator.json&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Creating a Deployment from kubernetes.yml namespace default name random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Created Deployment: target/jkube/applyJson/default/deployment-random-generator.json&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: HINT: Use the command `kubectl get pods -w` to watch your pods start up&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 7.306 s&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T11:40:57+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get pods -w&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME READY STATUS RESTARTS AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-58b7847d7f-9m9df 0/1 Running 0 7s&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-58b7847d7f-9m9df 1/1 Running 0 17s&lt;/span&gt; &lt;span style="color: #888888;"&gt;^C~/work/repos/eclipse-jkube-demo-project : $ kubectl get svc&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;io-openliberty-sample-getting-started NodePort 10.110.4.104 &amp;#60;none&amp;#62; 9080:30570/TCP 44h&lt;/span&gt; &lt;span style="color: #888888;"&gt;kubernetes ClusterIP 10.96.0.1 &amp;#60;none&amp;#62; 443/TCP 18d&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator NodePort 10.97.172.147 &amp;#60;none&amp;#62; 8080:32186/TCP 22s&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ curl `minikube ip`:32186/random | jq .&lt;/span&gt; &lt;span style="color: #888888;"&gt; % Total % Received % Xferd Average Speed Time Time Time Current&lt;/span&gt; &lt;span style="color: #888888;"&gt; Dload Upload Total Spent Left Speed&lt;/span&gt; &lt;span style="color: #888888;"&gt;100 45 0 45 0 0 1800 0 --:--:-- --:--:-- --:--:-- 1875&lt;/span&gt; &lt;span style="color: #888888;"&gt;{&lt;/span&gt; &lt;span style="color: #888888;"&gt; "id": "42e5571f-a20f-44b3-8184-370356581d10"&lt;/span&gt; &lt;span style="color: #888888;"&gt;}&lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3&gt;Step 6: Undeploy an application from the Kubernetes cluster&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;undeploy&lt;/code&gt; goal is the opposite of the &lt;code&gt;apply&lt;/code&gt; goal. It just deletes all of the resources applied during the &lt;code&gt;apply&lt;/code&gt; phase. Here is the output after initiating Eclipse JKube undeploy goal, &lt;code&gt;mvn k8s:undeploy&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get all&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME READY STATUS RESTARTS AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;pod/random-generator-58b7847d7f-9m9df 1/1 Running 0 5m21s&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;service/kubernetes ClusterIP 10.96.0.1 &amp;#60;none&amp;#62; 443/TCP 18d&lt;/span&gt; &lt;span style="color: #888888;"&gt;service/random-generator NodePort 10.97.172.147 &amp;#60;none&amp;#62; 8080:32186/TCP 5m21s&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME READY UP-TO-DATE AVAILABLE AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;deployment.apps/random-generator 1/1 1 1 5m21s&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME DESIRED CURRENT READY AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;replicaset.apps/random-generator-58b7847d7f 1 1 1 5m21s&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:undeploy&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:undeploy (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Using Kubernetes at https://192.168.39.145:8443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/kubernetes.yml &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Using namespace: default&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Deleting resource Deployment default/random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: Deleting resource Service default/random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] k8s: HINT: Use the command `kubectl get pods -w` to watch your pods start up&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 3.412 s&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T11:46:22+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get pods -w&lt;/span&gt; &lt;span style="color: #888888;"&gt;^C~/work/repos/eclipse-jkube-demo-project : $ kubectl get all&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;service/kubernetes ClusterIP 10.96.0.1 &amp;#60;none&amp;#62; 443/TCP 18d&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2&gt;Do more with Eclipse JKube&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve covered the core goals provided by Eclipse JKube and the Kubernetes Maven Plugin. You can use these goals to ease your Java application development workflow on top of Kubernetes. If you don&amp;#8217;t like typing the goals repeatedly, you could simplify by adding a specified execution in the plugin configuration, like this:&lt;/p&gt; &lt;pre&gt;&amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.eclipse.jkube&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;kubernetes-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${project.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;resource&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;apply&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &lt;/pre&gt; &lt;p&gt;I haven&amp;#8217;t covered all of the goals provided by Eclipse JKube and the Kubernetes Maven Plugin. Table 2 shows additional goals, which you could explore on your own.&lt;/p&gt; &lt;table align="center"&gt; &lt;caption&gt;Table 2: Additional Eclipse JKube goals.&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;Goal&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;&lt;strong&gt;Phase&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:log"&gt;k8s:log&lt;/a&gt;&lt;/td&gt; &lt;td&gt;VALIDATE&lt;/td&gt; &lt;td&gt;Get the logs from your application running inside of Kubernetes.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:debug"&gt;k8s:debug&lt;/a&gt;&lt;/td&gt; &lt;td&gt;PACKAGE&lt;/td&gt; &lt;td&gt;Open the debug port so that you can debug an application running inside Kubernetes from your IDE.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:deploy"&gt;k8s:deploy&lt;/a&gt;&lt;/td&gt; &lt;td&gt;INSTALL&lt;/td&gt; &lt;td&gt;Fork the Install goal and apply your generated manifests onto a Kubernetes cluster, just like the Apply goal.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:watch"&gt;k8s:watch&lt;/a&gt;&lt;/td&gt; &lt;td&gt;PACKAGE&lt;/td&gt; &lt;td&gt;Do an automatic hot deployment of your application by watching your application workspace.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;Deploying Java applications to Red Hat OpenShift using OpenShift Maven Plugin&lt;/h2&gt; &lt;p&gt;You can use the &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/docs/openshift-maven-plugin"&gt;OpenShift Maven plugin&lt;/a&gt; to deploy the same application on Red Hat OpenShift. The only difference would be that the &lt;code&gt;k8s&lt;/code&gt; goal prefix would be replaced by the &lt;code&gt;oc&lt;/code&gt; goal prefix. The Kubernetes Maven plugin does &lt;a target="_blank" rel="nofollow" href="https://www.docker.com/get-started"&gt;docker&lt;/a&gt; builds by default, and the OpenShift Maven Plugin does &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/enterprise/3.0/using_images/s2i_images/index.html"&gt;S2I&lt;/a&gt; builds by default. I haven&amp;#8217;t made any changes in my project apart from removing the property &lt;code&gt;jkube.generator.name&lt;/code&gt; since I won&amp;#8217;t be needing it for push (OpenShift pushes the image to its internal registry during the build phase). Here is an example, but instead of running one goal separately, I will deploy all of the resources and goals at once:&lt;/p&gt; &lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;"&gt; &lt;pre style="margin: 0; line-height: 125%;"&gt;&lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn oc:build oc:resource oc:apply&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Scanning for projects...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ----------------------&amp;#60; meetup:random-generator &amp;#62;-----------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- openshift-maven-plugin:1.0.0-rc-1:build (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Using OpenShift build with strategy S2I&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Running in OpenShift mode&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Running generator spring-boot&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: [random-generator:0.0.1] "spring-boot": Created docker source tar /home/rohaan/work/repos/eclipse-jkube-demo-project/target/docker/random-generator/0.0.1/tmp/docker-build.tar&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Adding to Secret pullsecret-jkube&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Using Secret pullsecret-jkube&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Creating BuildServiceConfig random-generator-s2i for Source build&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Creating ImageStream random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Starting Build random-generator-s2i&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Waiting for build random-generator-s2i-1 to complete...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Caching blobs under "/var/cache/blobs".&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Getting image source signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:cf0f3ebe9f536c782ab3835049cfbd9a663761ded9370791ef6ea3965c823aad&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:57de4da701b511cba33bbdc424757f7f3b408bea741ca714ace265da9b59191a&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:f320f94d91a064281f5127d5f49954b481062c7d56cce3b09910e471cf849050&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying config sha256:52d6788fcfdd39595264d34a3959464a5dabc1d4ef0ae188802b20fc2d6a857b&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Storing signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Generating dockerfile with builder image quay.io/jkube/jkube-java-binary-s2i:0.0.7&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 1: FROM quay.io/jkube/jkube-java-binary-s2i:0.0.7&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 2: LABEL "io.openshift.build.source-location"="/tmp/build/inputs" "io.openshift.build.image"="quay.io/jkube/jkube-java-binary-s2i:0.0.7"&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 3: ENV JAVA_APP_DIR="/deployments" OPENSHIFT_BUILD_NAME="random-generator-s2i-1" OPENSHIFT_BUILD_NAMESPACE="default"&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 4: USER root&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 5: COPY upload/src /tmp/src&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 6: RUN chown -R 1000:0 /tmp/src&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 7: USER 1000&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 8: RUN /usr/local/s2i/assemble&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: INFO S2I source build with plain binaries detected&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: INFO S2I binary build from fabric8-maven-plugin detected&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: INFO Copying binaries from /tmp/src/deployments to /deployments ...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: random-generator-0.0.1.jar&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: INFO Copying deployments from deployments to /deployments...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: '/tmp/src/deployments/random-generator-0.0.1.jar' -&amp;#62; '/deployments/random-generator-0.0.1.jar'&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 9: CMD /usr/local/s2i/run&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: STEP 10: COMMIT temp.builder.openshift.io/default/random-generator-s2i-1:48795e41&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: time="2020-08-10T06:37:49Z" level=info msg="Image operating system mismatch: image uses \"\", expecting \"linux\""&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: time="2020-08-10T06:37:49Z" level=info msg="Image architecture mismatch: image uses \"\", expecting \"amd64\""&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Getting image source signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:d8e1f35641acb80b562f70cf49911341dfbe8c86f4d522b18efbf3732aa74223&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:b6f081e4b2b6de8be4b1dec132043d14c121e968384dd624fb69c2c07b482edb&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:b7139ad07aa8ce4ed5a132f7c5cc9f1de0f5099b5e155027a23d57f7fbe78b16&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:98972fc90a1108315cc5b05b2c691a0849a149727a7b81e76bc847ac2c6d9714&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying config sha256:27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Storing signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: --&amp;#62; 27aaadaf28e&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: 27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Getting image source signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Pushing image image-registry.openshift-image-registry.svc:5000/default/random-generator:0.0.1 ...&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:f320f94d91a064281f5127d5f49954b481062c7d56cce3b09910e471cf849050&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:cf0f3ebe9f536c782ab3835049cfbd9a663761ded9370791ef6ea3965c823aad&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:57de4da701b511cba33bbdc424757f7f3b408bea741ca714ace265da9b59191a&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying blob sha256:98972fc90a1108315cc5b05b2c691a0849a149727a7b81e76bc847ac2c6d9714&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Copying config sha256:27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Storing signatures&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Successfully pushed image-registry.openshift-image-registry.svc:5000/default/random-generator@sha256:aa9e1a380c04ef9174ba56459c13d44420ebe653ebf32884d60fe4306b17306d&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Push successful&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Build random-generator-s2i-1 in status Complete&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Found tag on ImageStream random-generator tag: sha256:aa9e1a380c04ef9174ba56459c13d44420ebe653ebf32884d60fe4306b17306d&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: ImageStream random-generator written to /home/rohaan/work/repos/eclipse-jkube-demo-project/target/random-generator-is.yml&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- openshift-maven-plugin:1.0.0-rc-1:resource (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Using docker image name of namespace: default&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Running generator spring-boot&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: jkube-controller: Adding a default DeploymentConfig&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: jkube-service: Adding a default service 'random-generator' with ports [8080]&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: jkube-healthcheck-spring-boot: Adding readiness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 10 seconds&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: jkube-healthcheck-spring-boot: Adding liveness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 180 seconds&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: jkube-revision-history: Adding revision history limit to 2&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] --- openshift-maven-plugin:1.0.0-rc-1:apply (default-cli) @ random-generator ---&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Using OpenShift at https://api.crc.testing:6443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/openshift.yml &lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: OpenShift platform detected&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Using project: default&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Creating a Service from openshift.yml namespace default name random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Created Service: target/jkube/applyJson/default/service-random-generator.json&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Creating a DeploymentConfig from openshift.yml namespace default name random-generator&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Created DeploymentConfig: target/jkube/applyJson/default/deploymentconfig-random-generator.json&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: Creating Route default:random-generator host: null&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] oc: HINT: Use the command `oc get pods -w` to watch your pods start up&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] BUILD SUCCESS&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Total time: 01:07 min&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] Finished at: 2020-08-10T12:08:00+05:30&lt;/span&gt; &lt;span style="color: #888888;"&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ oc get pods -w&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME READY STATUS RESTARTS AGE&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-1-deploy 1/1 Running 0 14s&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-1-vnrm9 0/1 Running 0 11s&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-s2i-1-build 0/1 Completed 0 1m&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-1-vnrm9 1/1 Running 0 24s&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator-1-deploy 0/1 Completed 0 28s&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ oc get routes&lt;/span&gt; &lt;span style="color: #888888;"&gt;NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD&lt;/span&gt; &lt;span style="color: #888888;"&gt;random-generator random-generator-default.apps-crc.testing random-generator 8080 None&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $ curl random-generator-default.apps-crc.testing/random &lt;/span&gt; &lt;span style="color: #888888;"&gt; % Total % Received % Xferd Average Speed Time Time Time Current&lt;/span&gt; &lt;span style="color: #888888;"&gt; Dload Upload Total Spent Left Speed&lt;/span&gt; &lt;span style="color: #888888;"&gt;100 45 0 45 0 0 1666 0 --:--:-- --:--:-- --:--:-- 1730&lt;/span&gt; &lt;span style="color: #888888;"&gt;{&lt;/span&gt; &lt;span style="color: #888888;"&gt; "id": "d80052d9-2f92-43cb-b9eb-d7cffb879798"&lt;/span&gt; &lt;span style="color: #888888;"&gt;}&lt;/span&gt; &lt;span style="color: #888888;"&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2&gt;Watch a video demonstration&lt;/h2&gt; &lt;p&gt;For more about simplifying Kubernetes development with Eclipse JKube, watch this demonstration video. You&amp;#8217;ll learn how to quickly deploy a simple Spring Boot application onto Minikube:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/z1-EX-G3bpc?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you how to use Eclipse JKube to simplify your Kubernetes workloads. You can visit the Eclipse JKube &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/jkube/"&gt;project website&lt;/a&gt; to learn more about this collection. If you like Eclipse JKube, please support us by spreading the word about it on &lt;a target="_blank" rel="nofollow" href="https://twitter.com/jkubeio"&gt;Twitter&lt;/a&gt;. You can also &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube"&gt;watch and star the Eclipse JKube project on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#38;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;#038;title=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube" data-a2a-url="https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube/" data-a2a-title="Java development on top of Kubernetes using Eclipse JKube"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube/"&gt;Java development on top of Kubernetes using Eclipse JKube&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Qg4WbCbuRw0" height="1" width="1" alt=""/&gt;</content><summary>It has been 25 years since developers started adopting Java technology and making it part of their core application stack. Today, many Java developers and Java-based shops are migrating or looking to migrate their infrastructure to Kubernetes, or to related distributions like Red Hat OpenShift and Amazon EKS. Kubernetes has a steep learning curve, however, and it adds an additional layer of operat...</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2020-08-24T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube/</feedburner:origLink></entry></feed>
